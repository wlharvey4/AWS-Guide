# -*- mode:org; -*-

#+title:AWS Guide
#+subtitle:{{{version}}} {{{date}}}
#+author:Pinecone062
#+date:2019-12-31 16:12
#+macro:version Version 0.0.34
#+texinfo: @insertcopying


* AWS Glossary

https://docs.aws.amazon.com/general/latest/gr/glos-chap.html

** Amazon Web Services

https://aws.amazon.com/

“Start Now---Start building with Amazon Web Services”

https://aws.amazon.com/start-now/

#+cindex:Amazon Web Services (AWS)
#+cindex:AWS (Amazon Web Services)
Amazon Web Services (AWS) is a collection of digital infrastructure services
that developers can leverage when developing their applications.  The services
include computing, storage, database, and application synchronization
(messaging and queuing).  AWS uses a pay-as-you-go service model.  You are
charged only for the services that you—or your applications—use.  Also, to make
AWS more approachable as a platform for prototyping and experimentation, AWS
offers a free usage tier.

*** TODO Products

#+cindex:products
Amazon Web Services offers a broad set of global cloud-based products including
compute, storage, databases, analytics, networking, mobile, developer tools,
management tools, IoT, security and enterprise applications.  These services
help organizations move faster, lower IT costs, and scale.  AWS is trusted by
the largest enterprises and the hottest start-ups to power a wide variety of
workloads including: web and mobile applications, game development, data
processing and warehousing, storage, archive, and many others.

https://aws.amazon.com/products/

**** Analytics

**** Application Integration

**** AR & VR

**** AWS Cost Managment

**** Blockchain

** API Gateway
** API Reference
** CloudFront                                                   :networking:

“Fast, highly secure and programmable content delivery network (CDN)”

[[https://aws.amazon.com/cloudfront/][CloudFront Home]]

[[https://docs.aws.amazon.com/cloudfront/index.html][CloudFront Documentation]]

[[*CloudFront Documentation][CloudFront]]

#+cindex:CloudFront
- *CloudFront* :: An AWS content delivery service that helps you improve the
                  performance, reliability, and availability of your websites
                  and applications.


#+cindex:content delivery network (CDN)
#+cindex:CDN
*Amazon CloudFront* is a fast /content delivery network/ (CDN) service that
securely delivers data, videos, applications, and APIs to customers globally
with low latency, high transfer speeds, all within a developer-friendly
environment.

CloudFront works seamlessly with services including AWS Shield for DDoS
mitigation, Amazon S3, Elastic Load Balancing or Amazon EC2 as origins for your
applications, and =Lambda@Edge= to run custom code closer to customers’ users
and to customize the user experience.  Lastly, if you use AWS origins such as
Amazon S3, Amazon EC2 or Elastic Load Balancing, you don’t pay for any data
transferred between these services and CloudFront.

Amazon CloudFront speeds up distribution of your static and dynamic web
content, such as ~.html~, ~.css~, ~.php~, image, and media files.  When users
request your content, CloudFront delivers it through a worldwide network of
edge locations that provide low latency and high performance.

*** Benefits

#+texinfo:@heading Fast & global
The Amazon CloudFront content delivery network (CDN) is massively scaled and
globally distributed.  The CloudFront network has 210 points of presence
(PoPs), and leverages the highly-resilient Amazon backbone network for superior
performance and availability for your end users.

#+texinfo:@heading Security at the Edge
Amazon CloudFront is a highly-secure CDN that provides both network and
application level protection.  Your traffic and applications benefit through a
variety of built-in protections such as AWS Shield Standard, at no additional
cost.  You can also use configurable features such as AWS Certificate Manager
(ACM) to create and manage custom SSL certificates at no extra cost.

#+texinfo:@heading Highly programmable
Amazon CloudFront features can be customized for your specific application
requirements.  =Lambda@Edge= functions, triggered by CloudFront events, extend
your custom code across AWS locations worldwide, allowing you to move even
complex application logic closer to your end users to improve responsiveness.
The CDN also supports integrations with other tools and automation interfaces
for today's DevOps and CI/CD environments by using native APIs or AWS tools.

#+texinfo:@heading Deep integration with AWS
Amazon CloudFront is integrated with AWS services such as Amazon S3, Amazon
EC2, Elastic Load Balancing, Amazon Route 53, and AWS Elemental Media Services.
They are all accessible via the same console and all features in the CDN can be
programmatically configured by using APIs or the AWS Management Console.

*** Content Delivery Network
*** Edge location
#+cindex:edge location
#+cindex:CloudFront, edge location
CloudFront delivers your content through a worldwide network of data centers
called edge locations.

*** Origin
#+cindex:origin
#+cindex:CloudFront, origin
An Amazon S3 bucket, a MediaPackage channel, or an HTTP server (for example, a
web server) that you have identified as the source for the definitive version
of your content.
*** Use Cases

#+texinfo:@heading Static asset caching
Amazon CloudFront can speed up the delivery of your static content (e.g.,
images, style sheets, JavaScript, etc.) to viewers across the globe. The
Content Delivery Network (CDN) offers a multi-tier cache by default, with
regional Edge caches that improve latency and lower the load on your origin
servers when the object is not already cached at the Edge. Caching static
content gives you the performance and scale you need to give your viewers a
fast and reliable experience when visiting your website.

#+texinfo:@heading Live & on-demand video streaming
The Amazon CloudFront CDN offers multiple options for streaming your media ---
both pre-recorded files and live events --- at sustained, high throughput
required for 4K delivery to global viewers.  For on-demand streaming, you can
use CloudFront for multi-bitrate adaptive streaming in Microsoft Smooth, HLS,
HDS, or MPEG-DASH formats to any device.  To broadcast a live stream, you can
use the Content Delivery Network to cache the media fragments at the edge and
collapse multiple requests for the manifest file to reduce load to your origin.

#+texinfo:@heading Security
CloudFront integrates seamlessly with AWS Shield for Layer 3/4 DDoS mitigation
and AWS WAF for Layer 7 protection.  In addition, CloudFront negotiates TLS
connections with the highest security ciphers, and authenticates viewers with
signed URLs.  You can also use our advanced feature Field-Level Encryption to
protect most sensitive data throughout your enterprise, so the information can
only be viewed by certain components and services in your application stack.
CloudFront also integrates with AWS Identity and Access Management (IAM) to
control access, with AWS CloudTrail to log access to your configuration, and
with Amazon Certificate Manager (ACM) for automated certificate renewals.

#+texinfo:@heading Customizable content delivery with Lambda@@Edge
With =Lambda@Edge= you can easily run your code across AWS locations globally,
allowing you to respond to your end users at the lowest latency and allowing
you to personalize content.  For example, you can deliver unique content based
on attributes of your visitors, generate custom responses, or conduct A/B
testing with your own custom code running on the CloudFront infrastructure.

#+texinfo:@heading Dynamic content & API acceleration
Amazon CloudFront can be used to secure and accelerate your WebSocket traffic
as well as API calls.  CloudFront supports proxy methods (POST, PUT, OPTIONS,
DELETE, and PATCH) and is already integrated with Amazon API Gateway by
default.  With the Content Delivery Network (CDN), TLS connections with clients
terminate at a nearby edge location, then CloudFront uses optimized
AWS-backbone network paths to securely reach your API servers.

#+texinfo:@heading Software distribution
Amazon CloudFront scales automatically as globally-distributed clients download
software updates.  You can make your software available right at the edge where
your users are, via the content delivery network.  The CDN's high data transfer
rates speed up the delivery of your binaries, improving customer experience
while lowering your costs.

** Command Line Interface

https://aws.amazon.com/cli/

#+cindex:Command Line Interface (CLI)
#+cindex:CLI (Command Line Interface)
The AWS Command Line Interface (CLI) is a unified tool to manage your AWS
services.  With just one tool to download and configure, you can control
multiple AWS services from the command line and automate them through scripts.

The AWS CLI introduces a new set of simple file commands for efficient file
transfers to and from Amazon S3.

*** aws-shell                          :aws:aws:cli:cloud:cloud:management:

“The interactive productivity booster for the AWS CLI”

https://github.com/awslabs/aws-shell

#+cindex:aws-shell
An integrated shell for working with the AWS CLI.  The aws-shell is currently
in developer preview.

The ~aws-shell~ accepts the same commands as the AWS CLI, except you don't need
to provide the ~aws~ prefix.

#+texinfo:@heading Features

- Auto Completion of Commands and Options
- Shorthand Auto Completion
- Server Side Auto Completion
- Fuzzy Searching
- Inline Documentation
- Fish-Style Auto Suggestions
- Command History
- Toolbar Options
- Dot Commands
- Executing Shell Commands
** Developer Center

“Welcome developers!  The AWS Developer Center is your homepage for the AWS
developer community.  Build your first application on AWS, dig into our
technical documentation, or share your ideas with the community worldwide.”

https://aws.amazon.com/developer/

#+texinfo:@heading Build Your First Application

Dive into AWS and build your first web application.  In this tutorial, you'll
learn to build and deploy a web application on AWS, connect your app to a
backend database, and capture & analyze data on user behavior.

- [[https://aws.amazon.com/getting-started/projects/build-modern-app-fargate-lambda-dynamodb-python/][Start Tutorial]]


#+texinfo:@heading Choose Your Programming Language

** Identity and Access Management---IAM

#+cindex:Identity and Access Management
#+cindex:IAM

https://docs.aws.amazon.com/iam/index.html

AWS Identity and Access Management (IAM) is a web service for securely
controlling access to AWS services. With IAM, you can centrally manage
users, security credentials such as access keys, and permissions that
control which AWS resources users and applications can access.

*** IAM User Guide

https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html

Introduces you to AWS Identity and Access Management, helps you set up
users and groups, and shows you how to protect your resources with
access control policies. Also shows how to connect to other identity
services to grant external users access to your AWS resources.

*** IAM API Reference

https://docs.aws.amazon.com/IAM/latest/APIReference/Welcome.html

Describes all the API operations for AWS Identity and Access
Management in detail. Also provides sample requests, responses, and
errors for the supported web services protocols.

*** IAM CLI Reference

https://docs.aws.amazon.com/cli/latest/reference/iam/

Describes the AWS CLI commands that you can use to administer
IAM. Provides syntax, options, and usage examples for each command.

*** AWS IAM Access Analyzer

https://docs.aws.amazon.com/access-analyzer/latest/APIReference/Welcome.html

Describes the API operations for IAM Access Analyzer. Also provides
sample requests, responses, and errors for the supported web services
protocols.

*** Security Token Service---STS API Reference

https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html

Describes all the API operations for AWS STS in detail. Also provides
sample requests, responses, and errors for the supported web services
protocols.

*** Security Token Service---STS in the AWS CLI Reference

https://docs.aws.amazon.com/cli/latest/reference/sts/

Describes the AWS CLI commands that you can use to generate temporary
security credentials. Provides syntax, options, and usage examples for
each command.

** Lambda@Edge
** Media Services
** Organizations

#+cindex:organizations

“Central governance and management across AWS accounts.”

https://aws.amazon.com/organizations/

[[https://aws.amazon.com/organizations/features/][AWS Organizations Features]]

[[https://aws.amazon.com/organizations/getting-started/][Getting Started with AWS Organizations]]

/AWS Organizations/ helps you centrally govern your environment as you
grow and scale your workloads on AWS.  Whether you are a growing
startup or a large enterprise, Organizations helps you to centrally
manage billing; control access, compliance, and security; and share
resources across your AWS accounts.

Using AWS Organizations, you can automate account creation, create
groups of accounts to reflect your business needs, and apply policies
for these groups for governance.  You can also simplify billing by
setting up a single payment method for all of your AWS accounts.
Through integrations with other AWS services, you can use
Organizations to define central configurations and resource sharing
across accounts in your organization.  AWS Organizations is available
to all AWS customers at no additional charge.

#+texinfo:@heading Benefits

- CENTRALLY MANAGE POLICIES ACROSS MULTIPLE AWS ACCOUNTS

- GOVERN ACCESS TO AWS SERVICES, RESOURCES, AND REGIONS

- AUTOMATE AWS ACCOUNT CREATION AND MANAGEMENT

- CONFIGURE AWS SERVICES ACROSS MULTIPLE ACCOUNTS

- CONSOLIDATE BILLING ACROSS MULTIPLE AWS ACCOUNTS


#+texinfo:@heading Use Cases

- IMPLEMENT AND ENFORCE CORPORATE SECURITY, AUDIT, AND COMPLIANCE
  POLICIES

- SHARE RESOURCES ACROSS ACCOUNTS

- AUTOMATE THE CREATION OF AWS ACCOUNTS AND CATEGORIZE WORKLOADS USING
  GROUPS


#+texinfo: @heading Tutorials and Guides

- [[https://aws.amazon.com/documentation/organizations/][Documentation]]
- [[http://docs.aws.amazon.com/organizations/latest/APIReference/Welcome.html][API Guide]]
- [[http://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started.html][Getting Started Guide]]
- [[http://docs.aws.amazon.com/organizations/latest/userguide/orgs_tutorials_basic.html][Tutorial: Creating and Configuring an Organization]]
- [[http://docs.aws.amazon.com/organizations/latest/userguide/orgs_tutorials_cwe.html][Tutorial: Monitor Important Changes to Your Organization with CloudWatch Events]]
- [[https://aws.amazon.com/premiumsupport/knowledge-center/iam-policy-service-control-policy/][Differences between a service control policy and an AWS Identity and Access Management (IAM) policy]]
- [[https://aws.amazon.com/blogs/security/][Security Blog]]

*** Organizational Unit---OU

#+cindex:Organizational Unit
#+cindex:OU

** Policies

*** Organizations Service Control Policy---SCP

#+cindex:organizations Service Control Policy
#+cindex:SCP

** SDK for JavaScript Reference

https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html

[[https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/_index.html][Alphabetical Index]]

[[*SDK for JavaScript Documentation][JavaScript SDK Developer Guide]]

** Security
*** AWS Shield
Layer 3/4 DDoS mitigation

*** AWS WAF
Layer 7 protection
*** Cognito

“Amazon Cognito is a service that you can use to create unique identities for
your users, authenticate these identities with identity providers, and save
mobile user data in the AWS Cloud.”

https://docs.aws.amazon.com/cognito/?id=docs_gateway

[[https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html][What is Amazon Cognito]]

#+cindex:Cognito
#+cindex:authentication
#+cindex:authorization
#+cindex:user management
/Amazon Cognito/ provides authentication, authorization, and user management for
your web and mobile apps.  Your users can sign in directly with a user name and
password, or through a third party such as Facebook, Amazon, Google or Apple.

#+texinfo:@heading Main Components of Cognito

The two main components of Amazon Cognito are user pools and identity pools.

#+cindex:user pools
#+cindex:identity pools
#+attr_texinfo: :indic @b
- User pools :: User pools are user directories that provide sign-up and
                sign-in options for your app users.

- Identity pools :: Identity pools enable you to grant your users access to
                    other AWS services.


#+caption:An Amazon Cognito user pool and identity pool used together
#+name:scenario-cup-cib
#+texinfo:@ifhtml
[[file:../resources/scenario-cup-cib.png]]
#+texinfo:@end ifhtml
#+texinfo:@ifinfo
[[file:resources/scenario-cup-cib.png]]
#+texinfo:@end ifinfo

*** Cross-Site Request Forgery---CSRF

https://developer.amazon.com/docs/login-with-amazon/cross-site-request-forgery.html

#+cindex:cross-site request forgery
#+cindex:CSRF
/Cross-site Request Forgery/ happens when an attacker tricks a user into
clicking on a malicious link, where the link goes to a site where the user is
currently authenticated.

Any commands embedded in that malicious link might be executed automatically
because the user is already authenticated on the site, so the user does not see
a login screen or any other evidence of malicious activity.

In the case of Login with Amazon, Cross-site Request Forgery could be used to
mimic a client or an authentication server.

#+texinfo:@heading Use the =state= Parameter to Prevent CSRF

Login with Amazon recommends using the =state= parameter to prevent Cross-site
Request Forgery.

- The client should set the value of the =state= parameter when it initiates an
  authorization request, and save it to the user’s secure session.

- Unlike the =client_id= and =client_secret= values, in order for the =state=
  parameter to be useful in preventing attacks it should be unique, and
  non-guessable, for each and every authorization request.

  #+cindex:authorization server
- The authorization server returns the same =state= when communicating with the
  client to deliver authorization codes and access tokens .

- To protect users from attacks, the client must ignore communication if the
  returned =state= parameter doesn't match the value from the initial call.


#+texinfo:@heading Calculating the State Parameter

Clients can calculate the state parameter value in any way they choose;
however, the value should be secure from forgery.  Login with Amazon recommends
using a securely-generated random string with at least 256 bits of entropy.

#+texinfo:@subheading To calculate a state value using this method:

use a random number generator suitable for cryptographic operations.

Here is an example in Python:

#+begin_src python :eval no
def generate_state_parameter():
random = os.urandom(256)
state = base64.b64encode(random)
return (state)
#+end_src

After generating the =state= parameter value, save it to the user’s session
information, ensuring the information is communicated securely and saved to a
secure session.  When the state is returned by an authorization response,
verify the legitimacy of the user by comparing it with the state value saved to
their session.  If the values do not match, you should ignore the authorization
response.

If you’re also using the =state= parameter value to dynamically redirect users
after authentication, consider concatenating the securely-generated random
string with the dynamic URL, separated by a space, e.g. 
: state = state + " " + dynamicURL
When the authorization server returns the =state=, parse it and split it into
two values based on the space.  The second value will contain the dynamic URL
needed to direct the user to the appropriate page after authentication.

*** Field Level Encryption
*** Identity and Access Management---IAM
*** Security Credentials

#+cindex:security credentials

https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html

#+cindex:authenticate
#+cindex:authorize
When you interact with AWS, you specify your AWS /security
credentials/ to verify who you are and whether you have permission to
access the resources that you are requesting.  AWS uses the /security
credentials/ to *authenticate* and *authorize* your requests.

#+begin_cartouche
For example, if you want to download a specific file from an Amazon
Simple Storage Service (Amazon S3) bucket, your credentials must allow
that access. If your credentials aren't authorized to download the
file, AWS denies your request.
#+end_cartouche

**** Root User Credentials

#+cindex:root user credentials

https://docs.aws.amazon.com/general/latest/gr/root-vs-iam.html

All AWS accounts have /root user credentials/ (that is, the credentials
of the account owner).  These credentials allow full access to all
resources in the account.

You cannot use policies within your account to explicitly deny access
to the root user.  You can only use an [[*Organizations Service Control Policy---SCP][AWS Organizations service
control policy (SCP)]] to limit permissions to an account, including
the root user, that is a member of an organization or organizational
unit (OU).

Because of this, we recommend that you delete your root user access
keys and then create AWS Identity and Access Management (IAM) user
credentials for everyday interaction with AWS.
*** Signed URLs
*** TLS
*** CloudTrail
*** Certificate Manager---ACM
** Server Name Inidication---SNI

Server Name Indication (SNI) is an extension to the TLS protocol that is
supported by browsers and clients released after 2010.

See [[SNI][Using SNI to Serve HTTPS Requests]]
** Service Endpoints

https://docs.aws.amazon.com/general/latest/gr/rande.html

#+cindex:service endpoint
#+cindex:endpoint
To connect programmatically to an AWS service, you use an /endpoint/.  An
/endpoint/ is the URL of the entry point for an AWS web service.  The AWS SDKs
and the AWS Command Line Interface (AWS CLI) automatically use the default
endpoint for each service in an AWS Region.  But you can specify an alternate
endpoint for your API requests.

If a service supports Regions, the resources in each Region are independent of
similar resources in other Regions.  For example, you can create an Amazon EC2
instance or an Amazon SQS queue in one Region.  When you do, the instance or
queue is independent of instances or queues in all other Regions.

*** Regional Endpoints

#+cindex:Regions
#+cindex:Regional endpoints
Most Amazon Web Services offer a /Regional endpoint/ that you can use to make
your requests.  The general syntax of a Regional endpoint is as follows.

: protocol://service-code.region-code.amazonaws.com

The following table lists the name and code of each Region.

| Code                    | Name      |
|-------------------------+-----------|
| US East (Ohio)          | us-east-2 |
| US East (N. Virginia)   | us-east-1 |
| US West (N. California) | us-west-1 |
| US West (Oregon)        | us-west-2 |
| ...                     |           |
|-------------------------+-----------|

Some services, such as IAM, do not support Regions.  Thus, the endpoints for
those services do not include a Region.  Other services, such as Amazon EC2,
support Regions but let you specify an endpoint that does not include a Region,
such as =https://ec2.amazonaws.com=.  When you use an endpoint with no Region,
AWS routes the Amazon EC2 request to US East (N. Virginia) (us-east-1), which
is the default Region for API calls.

*** FIPs Endpoints
#+cindex:FIPS endpoints

Some AWS services offer FIPS endpoints in selected Regions.  Unlike standard
AWS endpoints, FIPS endpoints use a TLS software library that complies with
Federal Information Processing Standards (FIPS) standards.  These endpoints
might be required by enterprises that interact with the United States
government.

*** View the Service Endpoints

#+cindex:endpoints, search
To view the supported endpoints for an AWS service, open [[https://docs.aws.amazon.com/general/latest/gr/aws-service-information.html][Service Endpoints and
Quotas]], search for the service name, and click the link to open the page for
that service.

To view the supported endpoints for all AWS services in the documentation
without switching pages, view the information in the [[https://docs.aws.amazon.com/general/latest/gr/aws-general.pdf#aws-service-information][Service Endpoints and
Quotas]] page in the PDF instead.

** Simple Storage Service---S3
“Object storage built to store and retrieve any amount of data from anywhere”

https://aws.amazon.com/s3/

Amazon Simple Storage Service (Amazon S3) is an object storage service that
offers industry-leading scalability, data availability, security, and
performance.  Amazon S3 provides easy-to-use management features so you can
organize your data and configure finely-tuned access controls to meet your
specific business, organizational, and compliance requirements.

*** S3 Access Points

“Easily manage access for shared data sets on S3”

https://aws.amazon.com/s3/features/access-points/

#+cindex:access points
Access points are unique hostnames that customers create to enforce distinct
permissions and network controls for any request made through the access point.
Customers with shared data sets including data lakes, media archives, and
user-generated content can easily scale access for hundreds of applications by
creating individualized access points with names and permissions customized for
each application.  S3 Access Points is now available in all regions at no
additional cost.

**** TODO Article---Easily Manage Shared Data Sets with Amazon S3 Access Points
:PROPERTIES:
:uri:      https://aws.amazon.com/blogs/aws/easily-manage-shared-data-sets-with-amazon-s3-access-points/
:author:   Brandon West
:date:     December 3, 2019
:END:
*** S3 Features

https://aws.amazon.com/s3/features/

Amazon S3 has various features you can use to organize and manage your data in
ways that support specific use cases, enable cost efficiencies, enforce
security, and meet compliance requirements.

#+cindex:buckets
#+cindex:objects
- buckets :: Data is stored as objects within resources called “buckets”, and a
             single object can be up to 5 terabytes in size.


S3 features include:

#+cindex:metadata tags

- capabilities to append metadata tags to objects
- move and store data across the S3 Storage Classes
- configure and enforce data access controls
- secure data against unauthorized users
- run big data analytics
- monitor data at the object and bucket levels

**** Storage Classes

#+cindex:storage classes
- S3 Standard
- S3 Intelligent-Tiering
- S3 Standard-Infrequent Access (S3 Standard-IA)
- S3 One Zone-Infrequent Access (S3 One Zone-IA)
- Amazon S3 Glacier (S3 Glacier)
- Amazon S3 Glacier Deep Archive (S3 Glacier Deep Archive)

** Systems Manager

https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html

AWS Systems Manager is an AWS service that you can use to view and control your
infrastructure on AWS.  Using the Systems Manager console, you can view
operational data from multiple AWS services and automate operational tasks
across your AWS resources.  Systems Manager helps you maintain security and
compliance by scanning your managed instances and reporting on (or taking
corrective action on) any policy violations it detects.
** Virtual Private Cloud---VPC

“Provision a logically isolated section of the AWS cloud where you can launch
AWS resources in a virtual network that you define”

[[https://aws.amazon.com/vpc/][VPC Home]]

[[https://docs.aws.amazon.com/vpc/][VPC Documentation]]

#+cindex:Virtual Private Cloud
#+cindex:VPC
/Amazon Virtual Private Cloud (Amazon VPC)/ lets you provision a logically
isolated section of the AWS Cloud where you can launch AWS resources in a
virtual network that you define.  You have complete control over your virtual
networking environment, including selection of your own IP address range,
creation of subnets, and configuration of route tables and network gateways.
You can use both IPv4 and IPv6 in your VPC for secure and easy access to
resources and applications.

You can easily customize the network configuration of your Amazon VPC.  For
example, you can create a public-facing subnet for your web servers that have
access to the internet.  You can also place your backend systems, such as
databases or application servers, in a private-facing subnet with no internet
access.  You can use multiple layers of security, including security groups and
network access control lists, to help control access to Amazon EC2 instances in
each subnet.

#+texinfo:@heading Get started with Amazon VPC

You can automatically provision AWS resources in a ready-to-use [[http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html#detecting-platform][default VPC]].
Configure this VPC by adding or removing subnets, attaching network gateways,
changing the default route table, and modifying the network ACLs.

Create additional VPCs from the Amazon VPC page on the AWS Management Console
by selecting the "Start VPC Wizard" button.  You will be presented with four
basic network topologies.  Select the one that most closely resembles the
network topology that you’d like to create and click the "Create VPC" button.
You can then customize the topology further to fit your needs more closely.
Shortly after, you can start launching Amazon EC2 instances inside your VPC.

#+texinfo:@heading Benefits

#+texinfo:@subheading Secure

#+cindex:security groups
#+cindex:network access control lists
Amazon VPC provides advanced security features, such as security groups and
network access control lists, to enable inbound and outbound filtering at the
instance and subnet level.  In addition, you can store data in Amazon S3 and
restrict access so that it’s only accessible from instances inside your VPC.
For additional security, you can create dedicated instances that are physically
isolated from other AWS accounts, at the hardware level.

#+texinfo:@subheading Simple

#+cindex:AWS Management Console
Create a VPC quickly and easily using the AWS Management Console.  Select from
common network setups and find the best match for your needs.  Subnets, IP
ranges, route tables, and security groups are automatically created.  You spend
less time setting up and managing, so you can concentrate on building the
applications that run in your VPCs.

#+texinfo:@subheading Customizable

Control your virtual networking environment, including selection of your own IP
address range, creation of subnets, and configuration of route tables and
network gateways.  Customize the network configuration, such as by creating a
public-facing subnet for your webservers that has access to the internet, and
placing your backend systems such as databases or application servers in a
private-facing subnet with no internet access.

#+texinfo:@heading Use Cases

#+texinfo:@subheading Extend your corporate network into the cloud

#+cindex:corporate network
#+cindex:corporate firewall
Move corporate applications to the cloud, launch additional web servers, or add
more compute capacity to your network by connecting your VPC to your corporate
network.  Because your VPC can be hosted behind your corporate firewall, you
can seamlessly move your IT resources into the cloud without changing how your
users access these applications.  You can select "VPC with a Private Subnet
Only and Hardware VPN Access" from the Amazon VPC console wizard to create a
VPC that supports this use case

#+texinfo:@subheading Securely connect cloud applications to your datacenter

#+cindex:IPsec VPN
An IPsec VPN connection between your Amazon VPC and your corporate network
encrypts all communication between the application servers in the cloud and
databases in your data center.  Web servers and application servers in your VPC
can leverage Amazon EC2 elasticity and Auto Scaling features to grow and shrink
as needed.  You can create a VPC to support this use case by selecting "VPC
with Public and Private Subnets and Hardware VPN Access" in the Amazon VPC
console wizard.

#+texinfo:@subheading Out-of-band and inline traffic inspection

Amazon VPC traffic mirroring duplicates the traffic, along with full payload
data, from elastic network interfaces (ENIs) of EC2 instances, and delivers it
to out-of-band monitoring and security analysis tools.

Amazon VPC ingress routing allows you to easily deploy network and security
appliances, including third-party offerings, inline to the inbound or outbound
Amazon VPC traffic.  Inline traffic inspection helps you screen and secure
traffic to protect your workloads from malicious actors.

* AWS Documentation

“Find user guides, developer guides, API references, tutorials, and more.”

- [[https://aws.amazon.com/documentation/][View all Documentation]]

- [[https://github.com/awsdocs][Amazon Web Services --- Documentation on GitHub]]

#+texinfo:@heading Start building with SDKs and tools

#+texinfo:@subheading Access and manage AWS services with your preferred development language or platform

https://docs.aws.amazon.com/index.html


** CloudFront Documentation

[[https://docs.aws.amazon.com/cloudfront/index.html][CloudFront Documentation]]

*** CloudFront Developer Guide

Provides an overview of Amazon CloudFront, detailed feature descriptions,
procedures for using the console, and an explanation of the API.

- [[https://github.com/awsdocs/amazon-cloudfront-developer-guide/tree/master/doc_source][The open source version of the Amazon CloudFront documentation]]


*** CloudFront API Reference

*** What CloudFront Is

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html

*** How You Set Up CloudFront to Deliver Content

#+cindex:CloudFront distribution, create
#+cindex:CloudFront, configure
#+cindex:edge server
You create a CloudFront distribution to tell CloudFront where you want content
to be delivered from, and the details about how to track and manage content
delivery.  Then CloudFront uses computers---edge servers---that are close to
your viewers to deliver that content quickly when someone wants to see it or
use it.

#+texinfo:@heading How You Configure CloudFront to Deliver Your Content

#+cindex:origin server
#+cindex:custom origin
#+cindex:edge location
1. You specify /origin servers/, like an Amazon S3 bucket or your own HTTP
   server, from which CloudFront gets your files which will then be distributed
   from CloudFront edge locations all over the world.  An /origin server/
   stores the original, definitive version of your objects.  If you're serving
   content over HTTP, your origin server is either an Amazon S3 bucket or an
   HTTP server, such as a web server.  Your HTTP server can run on an Amazon
   Elastic Compute Cloud (Amazon EC2) instance or on a server that you manage;
   these servers are also known as /custom origins/.  If you use the Adobe
   Media Server RTMP protocol to distribute media files on demand, your origin
   server is always an Amazon S3 bucket.

   #+cindex:objects
2. You upload your files to your origin servers.  Your files, also known as
   objects, typically include web pages, images, and media files, but can be
   anything that can be served over HTTP or a supported version of Adobe RTMP,
   the protocol used by Adobe Flash Media Server.

   If you're using an Amazon S3 bucket as an origin server, you can make the
   objects in your bucket publicly readable, so that anyone who knows the
   CloudFront URLs for your objects can access them.  You also have the option
   of keeping objects private and controlling who accesses them.

3. You create a CloudFront /distribution/, which tells CloudFront which origin
   servers to get your files from when users request the files through your web
   site or application.  At the same time, you specify details such as whether
   you want CloudFront to log all requests and whether you want the
   distribution to be enabled as soon as it's created.
   #+cindex:domain name
   #+cindex:alternate domain name
4. CloudFront assigns a /domain name/ to your new distribution that you can see
   in the CloudFront console, or that is returned in the response to a
   programmatic request, for example, an API request.  If you like, you can add
   an /alternate domain name/ to use instead.
   #+cindex:points of presence (POPs)
   #+cindex:POPs (points of presence)
5. CloudFront sends your distribution's configuration (but not your content) to
   all of its edge locations or points of presence (POPs)---collections of
   servers in geographically-dispersed data centers where CloudFront caches
   copies of your files.


As you develop your website or application, you use the domain name that
CloudFront provides for your URLs.  For example, if CloudFront returns
~d111111abcdef8.cloudfront.net~ as the domain name for your distribution, the
URL for ~logo.jpg~ in your Amazon S3 bucket (or in the root directory on an
HTTP server) is =http://d111111abcdef8.cloudfront.net/logo.jpg=.

Or you can set up CloudFront to use your own domain name with your
distribution.  In that case, the URL might be
=http://www.example.com/logo.jpg=.

Optionally, you can configure your origin server to add headers to the files,
to indicate how long you want the files to stay in the cache in CloudFront edge
locations.  By default, each file stays in an edge location for 24 hours before
it expires.  The minimum expiration time is 0 seconds; there isn't a maximum
expiration time limit.

*** Accessing CloudFront

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/introduction-accessing-cloudfront.html

You can access Amazon CloudFront in the following ways:

- AWS Management Console ::

     The procedures throughout this guide explain how to use the AWS Management
     Console to perform tasks.

- AWS SDKs ::

	    If you're using a programming language that AWS provides an SDK
              for, you can use an SDK to access CloudFront. SDKs simplify
              authentication, integrate easily with your development
              environment, and provide access to CloudFront commands.

- CloudFront API ::

		     If you're using a programming language that an SDK isn't
                    available for, see the [[https://docs.aws.amazon.com/cloudfront/latest/APIReference/][Amazon CloudFront API Reference]] for
                    information about API actions and about how to make API
                    requests.

- AWS Command Line Interface ::

     For more information, see [[https://docs.aws.amazon.com/cli/latest/userguide/][Getting Set Up with the AWS Command Line
     Interface]] in the AWS Command Line Interface User Guide.

*** Working with Distributions

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html

#+cindex:distribution, CloudFront
#+cindex:CloudFront distribution
You create a CloudFront /distribution/ to tell CloudFront where you want
content to be delivered from, and the details about how to track and manage
content delivery.  The following topics explain some basics about CloudFront
distributions and provide detailed information about the settings you can
choose to configure your distributions to meet your business needs.

**** Creating Updating and Deleting Distributions

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-create-delete.html

You can create, update, or delete a distribution by completing the steps in the
following topics.

***** Steps for Creating a Distribution---Overview

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating.html

***** Creating a Distribution

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating-console.html

This topic is about working with distributions by using the console.

If you want to create or update a distribution by using the CloudFront API, see
[[https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html][Create Distribution]] or [[https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html][Update Distribution]] in the /Amazon CloudFront API
Reference/.  When you update your distribution, be aware that a number of
additional fields are required that are not required to create a distribution.
To help make sure that all of the required fields are included when you update
your distribution by using the CloudFront API, follow the steps described in
the /Amazon CloudFront API Reference/.

***** Values That You Specify When You Create or Update a Distribution

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html

When you create a new distribution or update an existing distribution, you
specify the following values.

- Delivery Method

  - =Web= or =RTMP=
  - Unless you're using Adobe Flash Media Server with RTMP, this value is
    always =Web=.

- Origin Settings
  #+cindex:origin settings
  When you create or update a distribution, you provide information about one
  or more locations---known as origins---where you store the original versions
  of your web content.  CloudFront gets your web content from your origins and
  serves it to viewers via a world-wide network of edge servers.  Each origin
  is either an Amazon S3 bucket or an HTTP server, for example, a web server.
  #+cindex:origin domain name
  - Origin Domain Name :: The DNS domain name of the Amazon S3 bucket or HTTP
       server from which you want CloudFront to get objects for this origin.
       Choose the domain name in the Origin Domain Name field, or type the
       name.  The domain name is not case sensitive.

       If your origin is an Amazon S3 bucket, note the following:

    - If the bucket is configured as a website, enter the Amazon S3 static
      website hosting endpoint for your bucket; don't select the bucket name
      from the list in the Origin Domain Name field.

    - The files must be publicly readable unless you secure your content in
      Amazon S3 by using a CloudFront origin access identity.

  - Origin Path ::
    #+cindex:origin path
      If you want CloudFront to request your content from a directory in your
                   AWS resource or your custom origin, enter the directory
                   path, beginning with a slash (=/=).  CloudFront appends the
                   directory path to the value of Origin Domain Name, for
                   example, ~cf-origin.example.com/production/images~.  Do not
                   add a slash (=/=) at the end of the path.

  - Origin ID ::
    #+cindex:origin id
      A string that uniquely distinguishes this origin or origin group in this
                 distribution.  If you create cache behaviors in addition to
                 the default cache behavior, you use the ID that you specify
                 here to identify the origin or origin group that you want
                 CloudFront to route a request to when the request matches the
                 path pattern for that cache behavior.


The following values are for Amazon S3 origins only (except if configured as
website endpoints):

- Restrict Bucket Access
- Origin Access Identity
- Comment for New Identity
- Your Identities
- Grant Read Permissions on Bucket


The following values are for custom origins only, such as Amazon EC2, Elastic
Load Balancing, Amazon S3 buckets configured as website endpoints, or your own
web server:

- Minimum Origin SSL Protocol :: we recommend that you choose the latest TLS
     protocol that your origin supports.
- Origin Protocol Policy :: The protocol policy that you want CloudFront to use
     when fetching objects from your origin server.

  - HTTP Only :: If your origin is an Amazon S3 bucket configured as a
                 website endpoint, you must choose this option. Amazon S3
                 doesn't support HTTPS connections for website endpoints.

  - HTTPS Only :: CloudFront uses only HTTPS to access the origin.

  - Match Viewer :: CloudFront communicates with your origin using HTTP or
                    HTTPS, depending on the protocol of the viewer request.
	
- Origin Response Timeout ::
- Origin Keep-alive Timeout ::
- HTTP Port ::
- HTTPS Port ::


The following value is for all types of origins:

- Origin Custom Headers
  #+cindex:origin custom headers
  #+cindex:custom headers
  If you want CloudFront to include custom headers whenever it forwards a
  request to your origin, specify the following values:

  - Header Name
  - Value

- Cache Behavior Settings
  #+cindex:cache behavior settings
  A cache behavior lets you configure a variety of CloudFront functionality for
  a given URL path pattern for files on your website.

  When you create a new distribution, you specify settings for the default
  cache behavior, which automatically forwards all requests to the origin that
  you specify when you create the distribution.  After you create a
  distribution, you can create additional cache behaviors that define how
  CloudFront responds when it receives a request for objects that match a path
  pattern.  If you create additional cache behaviors, the default cache
  behavior is always the last to be processed.  Other cache behaviors are
  processed in the order in which they're listed in the CloudFront console or,
  if you're using the CloudFront API, the order in which they're listed in the
  DistributionConfig element for the distribution.
  #+cindex:path pattern
  - Path Pattern
  - Origin (Existing Distributions Only)
  - Viewer Protocol Policy
  - Allowed HTTP Methods
  - Field Level Encryption
  - Cached HTTP Methods
  - Cache Based on Selected Request Headers
  - Whitelist Headers
  - Object Caching
  - Minimum TTL
  - Maximum TTL
  - Default TTL
  - Forward Cookies
  - Whitelist Cookies
  - Query String Forwarding and Caching
  - Query String Whitelist
  - Smooth Streaming
  - Restrict Viewer Access (Use Signed URLs)
  - Trusted Signers
  - AWS Account Numbers
  - Compress Objects Automatically
  - Event Type
  - Lambda Function ARN

- Distribution Details

  - Price Class
  - AWS WAF Web ACL
  - Alternate Domain Names (CNAMEs)
  - SSL Certificate
  - Clients Supported
  - Security Policy
  - Minimum SSL Security Protocol – See Security Policy
  - Supported HTTP Versions
  - Default Root Object
  - Logging
  - Bucket for Logs
  - Log Prefix
  - Cookie Logging
  - Enable IPv6
  - Comment
  - Distribution State

- Custom Error Pages and Error Caching

  - Error Code
  - Response Page Path
  - Response Code
  - Error Caching Minimum TTL

- Restrictions

  - Enable Geo Restriction
  - Restriction Type
  - Countries

**** Using Different Origins

**** Using Custom URLs

“Using Custom URLs for Files by Adding Alternate Domain Names (CNAMEs)”

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html

#+cindex:alternate domain name (CNAME)
#+cindex:CNAME (alternate domain name)
In CloudFront, an /alternate domain name/, also known as a *CNAME*, lets you
use your own domain name (for example, =www.example.com=) for links to your
files instead of using the domain name that CloudFront assigns to your
distribution.  Both web and RTMP distributions support alternate domain names.

When you create a distribution, CloudFront returns a domain name for the
distribution, for example:

: d111111abcdef8.cloudfront.net

When you use the CloudFront domain name for your files, the URL for a file
called /images/image.jpg is:

: http://d111111abcdef8.cloudfront.net/images/image.jpg

If you want to use your own domain name, such as =www.example.com=, instead of
the cloudfront.net domain name, you can add an /alternate domain name/ to your
distribution, like =www.example.com=.  You can then use the following URL to
view ~/images/image.jpg~:

: http://www.example.com/images/image.jpg

***** Adding an Alternate Domain Name

#+cindex:alternate domain name
The following task list describes how to use the CloudFront console to add an
alternate domain name to your distribution so that you can use your own domain
name in your links instead of the CloudFront domain name.

For information about updating your distribution using the CloudFront API:
- see [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html][Working with Distributions]].


#+cindex:HTTPS, alternate domain name
If you want viewers to use HTTPS with your alternate domain name:
- see [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html][Using Alternate Domain Names and HTTPS]].


#+texinfo:@heading Before You Begin

Make sure that you do the following before you update your distribution to add
an alternate domain name:

- Register the domain name with Route 53 or another domain provider.

- Add a certificate from an authorized certificate authority (CA) to CloudFront
  that covers the domain name you plan to use with the distribution, to
  validate that you are authorized to use the domain.


#+texinfo:@heading Adding an Alternate Domain Name

Update the following values:

#+attr_texinfo: :indic @b
- Alternate Domain Names (CNAMEs) ::

     Add your alternate domain names.  Separate domain names with commas, or
     type each domain name on a new line.

- SSL Certificate (Web Distributions Only) ::

     Choose the following setting:

     *Use HTTPS*; choose *Custom SSL Certificate*, and then choose a
     certificate from the list.

- Clients Supported (Web Distributions Only) ::

     Choose an option:

  - Only Clients that Support Server Name Indication (SNI) (Recommended) ::

       Older browsers or other clients that don't support SNI must use
       another method to access your content.

  - All Clients :: CloudFront serves your HTTPS content using dedicated IP
                   addresses.  If you select this option, you incur additional
                   charges when you associate your SSL/TLS certificate with a
                   distribution that is enabled.


#+texinfo:@heading Confige the DNS Service

Configure the DNS service for the domain to route traffic for the domain, such
as ~example.com~, to the CloudFront domain name for your distribution, such as
~d111111abcdef8.cloudfront.net~.

#+cindex:alias resource record set
- Route 53 :: Create an /alias resource record set/.  With an alias resource
              record set, you don't pay for Route 53 queries.  In addition, you
              can create an alias resource record set for the root domain name
              (~example.com~), which DNS doesn't allow for =CNAME=s.

	      For more information, see [[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html][Routing Queries to an Amazon CloudFront
              Distribution]] in the Amazon Route 53 Developer Guide.


#+cindex:@command{dig}
#+cindex:domain information groper (dig)
Using ~dig~ or a similar tool, confirm that the resource record set that you
created in step 7 points to the domain name for your distribution.  For more
information about ~dig~, go to http://www.kloth.net/services/dig.php.

***** Moving an Alternate Domain Name to a Different CloudFront Distribution

***** Removing an Alternate Domain Name

***** Using Wildcards in Alternate Domain Names That You Add to CloudFront

***** Requirements for Using Alternate Domain Names

***** Restrictions on Using Alternate Domain Names

**** Using WebSockets

*** Serving Private Content using CloudFront

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html

Many companies that distribute content over the internet want to restrict
access to documents, business data, media streams, or content that is intended
for selected users, for example, users who have paid a fee.  To securely serve
this private content by using CloudFront, you can do the following:

#+cindex:signed URLs
#+cindex:signed cookies
- Require that your users access your private content by using special
  CloudFront signed URLs or signed cookies.

  #+cindex:CloudFront URLs
- Require that your users access your content by using CloudFront URLs, not
  URLs that access content directly on the origin server (for example, Amazon
  S3 or a private HTTP server).  Requiring CloudFront URLs isn't necessary, but
  we recommend it to prevent users from bypassing the restrictions that you
  specify in signed URLs or signed cookies.

**** Overview of Serving Private Content

#+cindex:access, restrict
You can control user access to your private content in two ways, as shown in
the following illustration:

1. Restrict access to files in CloudFront edge caches

2. Restrict access to files in your origin by doing one of the following:
   #+cindex:origin access identity (OAI)
   #+cindex:OAI (origin access identity)
   - Set up an origin access identity (OAI) for your Amazon S3 bucket (unless
     you've configured it as a website endpoint)
     #+cindex:custom headers
   - Configure custom headers for a private HTTP server or an Amazon S3 bucket
     configured as a website endpoint


#+texinfo:@heading Restricting Access to Files in CloudFront Edge Caches

#+cindex:signed URLs
#+cindex:signed cookies
You can configure CloudFront to require that users access your files using
either signed URLs or signed cookies.  You then develop your application either
to create and distribute signed URLs to authenticated users or to send
Set-Cookie headers that set signed cookies on the viewers for authenticated
users.  (To give a few users long-term access to a limited number of files, you
can also create signed URLs manually.)

When you create signed URLs or signed cookies to control access to your files,
you can specify the following restrictions:

- An ending date and time, after which the URL is no longer valid.

- (Optional) The date and time that the URL becomes valid.

- (Optional) The IP address or range of addresses of the computers that can be
  used to access your content.


#+cindex:key pair
One part of a signed URL or a signed cookie is hashed and signed using the
private key from a public/private key pair.  When someone uses a signed URL or
signed cookie to access a file, CloudFront compares the signed and unsigned
portions of the URL or cookie.  If they don't match, CloudFront doesn't serve
the file.

#+cindex:RSA-SHA1
You must use RSA-SHA1 for signing URLs or cookies.  CloudFront doesn't accept
other algorithms.

#+texinfo:@heading Restricting Access to Files in Amazon S3 Buckets

#+cindex:restrict access
#+cindex:access, restrict
You can optionally secure the content in your Amazon S3 bucket so that users
can access it through CloudFront but cannot access it directly by using Amazon
S3 URLs.  This prevents someone from bypassing CloudFront and using the Amazon
S3 URL to get content that you want to restrict access to.  This step isn't
required to use signed URLs, but we recommend it.  Be aware that this option is
only available if you have not set up your Amazon S3 bucket as a website
endpoint.

To require that users access your content through CloudFront URLs, you do the
following tasks:

#+cindex:origin access identity
- Create a special CloudFront user called an *origin access identity*.

- Give the origin access identity permission to read the files in your bucket.

- Remove permission for anyone else to use Amazon S3 URLs to read the files.


For more information:

- see [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html][Restricting Access to Amazon S3 Content by Using an Origin Access Identity]]


#+texinfo:@heading Restricting Access to Files on Custom Origins

#+cindex:custom headers
#+cindex:restrict access, custom headers
#+cindex:access, restrict using custom headers
If you use a custom origin, you can optionally set up custom headers to
restrict access.  For CloudFront to get your files from a custom origin, the
files must be publicly accessible.  But by using custom headers, you can
restrict access to your content so that users can access it only through
CloudFront, not directly.  This step isn't required to use signed URLs, but we
recommend it.

To require that users access content through CloudFront, change the following
settings in your CloudFront distributions:

- Origin Custom Headers :: 

     Configure CloudFront to forward custom headers to your origin.

     See [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/forward-custom-headers.html#forward-custom-headers-configure][Configuring CloudFront to Forward Custom Headers to Your Origin]].

- Viewer Protocol Policy ::

     Configure your distribution to require viewers to use HTTPS to access
     CloudFront.

     See [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesViewerProtocolPolicy][Viewer Protocol Policy]].

- Origin Protocol Policy ::

     Configure your distribution to require CloudFront to use the same protocol
     as viewers to forward requests to the origin.

     See [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginProtocolPolicy][Origin Protocol Policy]]


After you've made these changes, update your application on your custom origin
to only accept requests that include these headers.

The combination of *Viewer Protocol Policy* and *Origin Protocol Policy* ensure
that your custom headers are encrypted between the viewer and your origin.
However, we recommend that you periodically do the following to rotate the
custom headers that CloudFront forwards to your origin:.

1. Update your CloudFront distribution to begin forwarding a new header to your
   custom origin.

2. Update your application to accept the new header as confirmation that the
   request is coming from CloudFront.

3. When viewer requests no longer include the header that you're replacing,
   update your application to no longer accept the old header as confirmation
   that the request is coming from CloudFront.

**** Serving Private Content

To configure CloudFront to serve private content, do the following tasks:

1. (Optional but recommended) Require your users to access your content only
   through CloudFront.  The method that you use depends on whether you're using
   Amazon S3 or custom origins:

   - Amazon S3 ::

     See [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html][Restricting Access to Amazon S3 Content by Using an Origin Access Identity]].

   - Custom origin ::

		      See [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-overview.html#forward-custom-headers-restrict-access][Restricting Access to Files on Custom Origins]].

		      Custom origins include Amazon EC2, Amazon S3 buckets
                      configured as website endpoints, Elastic Load Balancing,
                      and your own HTTP web servers.

2. Specify the AWS accounts that you want to use to create signed URLs or
   signed cookies.

   see [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html][Specifying the AWS Accounts That Can Create Signed URLs and Signed Cookies (Trusted Signers)]].

3. Write your application to respond to requests from authorized users either
   with signed URLs or with Set-Cookie headers that set signed cookies. Follow
   the steps in one of the following topics:

   - [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html][Using Signed URLs]]

   - [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-cookies.html][Using Signed Cookies]]

   - If you're not sure which method to use, see[[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-choosing-signed-urls-cookies.html][Choosing Between Signed URLs and Signed Cookies]].

**** Specifying Your Trusted Signers

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html

#+cindex:trusted signer
To create signed URLs or signed cookies, you need at least one AWS account that
has an active CloudFront key pair.  This account is known as a trusted signer.
The trusted signer has two purposes:

- As soon as you add the AWS account ID for your trusted signer to your
  distribution, CloudFront starts to require that users use signed URLs or
  signed cookies to access your files.
  #+cindex:private key
- When you create signed URLs or signed cookies, you use the private key from
  the trusted signer's key pair to sign a portion of the URL or the cookie.
  When someone requests a restricted file, CloudFront compares the signed
  portion of the URL or cookie with the unsigned portion to verify that the URL
  or cookie hasn't been tampered with.  CloudFront also verifies that the URL
  or cookie is valid, meaning, for example, that the expiration date and time
  hasn't passed.


When you specify trusted signers, you also indirectly specify the files that
require signed URLs or signed cookies:

- Web distributions ::

     You add trusted signers to cache behaviors.  If your distribution has only
     one cache behavior, users must use signed URLs or signed cookies to access
     any file associated with the distribution.  If you create multiple cache
     behaviors and add trusted signers to some cache behaviors and not to
     others, you can require that users use signed URLs or signed cookies to
     access some files and not others.

- RTMP distributions (signed URLs only) ::

     You add trusted signers to a distribution.  After you add trusted signers
     to an RTMP distribution, users must use signed URLs to access any file
     associated with the distribution.


*Note*: To specify trusted signers for a distribution, you must use the
CloudFront console or CloudFront API version 2009-09-09 or later.

To specify the accounts that are allowed to create signed URLs or signed
cookies and to add the accounts to your CloudFront distribution, do the
following tasks:

1. Decide which AWS accounts you want to use as trusted signers. Most
   CloudFront customers use the account that they used to create the
   distribution.

2. For each of the accounts that you selected in Step 1, create a CloudFront
   key pair.

   See [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html#private-content-creating-cloudfront-key-pairs][Creating CloudFront Key Pairs for Your Trusted Signers]].

3. If you're using .NET or Java to create signed URLs or signed cookies,
   reformat the CloudFront private key.

   see [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html#private-content-reformatting-private-key][Reformatting the CloudFront Private Key (.NET and Java Only)]].

4. In the distribution for which you're creating signed URLs or signed cookies,
   specify the AWS account IDs of your trusted signers.

**** Choosing Between Signed URLs and Signed Cookies

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-choosing-signed-urls-cookies.html

CloudFront signed URLs and signed cookies provide the same basic functionality:
they allow you to control who can access your content.  If you want to serve
private content through CloudFront and you're trying to decide whether to use
signed URLs or signed cookies, consider the following.

#+texinfo:@heading Use signed URLs in the following cases:

- You want to use an RTMP distribution.  Signed cookies aren't supported for
  RTMP distributions.

- You want to restrict access to individual files, for example, an installation
  download for your application.

- Your users are using a client (for example, a custom HTTP client) that
  doesn't support cookies.


#+texinfo:@heading Use signed cookies in the following cases:

- You want to provide access to multiple restricted files, for example, all of
  the files for a video in HLS format or all of the files in the subscribers'
  area of website.

- You don't want to change your current URLs.


If you are not currently using signed URLs and if your URLs contain any of the
following query string parameters, you cannot use either signed URLs or signed
cookies:

- Expires
- Policy
- Signature
- Key-Pair-Id


CloudFront assumes that URLs that contain any of those query string parameters
are signed URLs and therefore won't look at signed cookies.

** Cognito Documentation

“Amazon Cognito is a service that you can use to create unique identities for
your users, authenticate these identities with identity providers, and save
mobile user data in the AWS Cloud.”

#+cindex:Cognito documentation
[[https://docs.aws.amazon.com/cognito/index.html]]

*** Cognito API Reference

“Describes all of the REST API actions for user pools in detail.”

https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/Welcome.html

#+cindex:Cognito API reference
This API reference provides information about /user pools/ in Amazon Cognito
User Pools.
** Command Line Interface Command Reference

[[http://docs.aws.amazon.com/cli/latest/userguide/][CLI User Guide]]

#+cindex:Command Line Interface
The AWS Command Line Interface is a unified tool to manage your AWS services.

[[https://docs.aws.amazon.com/cli/latest/reference/][AWS CLI API Reference]]

#+texinfo:@heading Synopsis

#+cindex:synopsis
: aws [options] <command> <subcommand> [parameters]

#+cindex:help, aws command
#+attr_texinfo: :indic @code
- aws <command> help :: for information on a specific command

- aws help topics :: to view a list of available help topics


The synopsis for each command shows its parameters and their usage. Optional
parameters are shown in square brackets.

*** cloudfront

[[https://docs.aws.amazon.com/cli/latest/reference/cloudfront/index.html][CloudFront API Reference]]

Local link to [[*CloudFront Developer Guide][CloudFront Developer Guide]]

#+cindex:cloudfront api reference
This is the Amazon CloudFront API Reference.  This guide is for developers who
need detailed information about CloudFront API actions, data types, and errors.

*** s3
<<s3 API>>

#+cindex:s3 API
This section explains prominent concepts and notations in the set of high-level
S3 commands provided.

https://docs.aws.amazon.com/cli/latest/reference/s3/index.html

**** Path Argument Type

#+cindex:path argument type
#+cindex:@code{LocalPath}
#+cindex:@code{S3Uri}
Whenever using a command, at least one path argument must be specified.  There
are two types of path arguments: =LocalPath= and =S3Uri=.

#+attr_texinfo: :indic @code
- LocalPath :: represents the path of a local file or directory. It can be
               written as an absolute path or relative path.

- S3Uri :: represents the location of a S3 object, prefix, or bucket.  This
           must be written in the form:
	   : s3://mybucket/mykey

**** Order of Path Arguments

Every command takes one or two positional path arguments.

- The /first path argument/ represents the *source*, which is the local
  file/directory or S3 object/prefix/bucket that is being referenced.  Commands
  with only one path argument do not have a *destination* because the operation
  is being performed only on the *source*.

- If there is a /second path argument/, it represents the *destination*, which
  is the local file/directory or S3 object/prefix/bucket that is being operated
  on.

**** Single Local File and S3 Object Operations

Some commands perform operations only on single files and S3 objects.  The
following commands are single file/object operations if no
@@texinfo:@option{--recursive}@@ flag is provided.

- cp
- mv
- rm


For this type of operation, the first path argument, the *source*, must exist
and be a local file or S3 object.  The second path argument, the *destination*,
can be the name of a local file, local directory, S3 object, S3 prefix, or S3
bucket.

The *destination* is indicated as a local directory, S3 prefix, or S3 bucket if
it ends with a forward slash or back slash.  The use of slash depends on the
path argument type.  If the path argument is a =LocalPath=, the type of slash
is the separator used by the operating system.  If the path is a =S3Uri, the
forward slash must always be used.  If a slash is at the end of the
*destination*, the destination file or object will adopt the name of the source
file or object.  Otherwise, if there is no slash at the end, the file or object
will be saved under the name provided.  See examples in ~cp~ and ~mv~ to
illustrate this description.

**** Directory and S3 Prefix Operations

Some commands only perform operations on the contents of a local directory or
S3 prefix/bucket.  Adding or omitting a forward slash or back slash to the end
of any path argument, depending on its type, does not affect the results of the
operation.  The following commands will always result in a directory or S3
prefix/bucket operation:

- sync
- mb
- rb
- ls

**** Use of Exclude and Include Filters

Currently, there is no support for the use of UNIX style wildcards in a
command's path arguments.  However, most commands have
@@texinfo:@option{--exclude "<value>"}@@ and @@texinfo:@option{--include
"<value>"} parameters that can achieve the desired result.  These parameters
perform pattern matching to either exclude or include a particular file or
object.  The following pattern symbols are supported.

#+cindex:filters
#+attr_texinfo: :indic @samp
- * :: Matches everything
 
- ? :: Matches any single character

- [sequence] :: Matches any character in sequence

- [!sequence] :: Matches any character not in sequence


Any number of these parameters can be passed to a command.  You can do this by
providing an @@texinfo:@option{--exclude}@@ or @@texinfo:@option{--include}@@
argument multiple times, e.g. @@texinfo:@samp{--include "*.txt"--include
"*.png"}@@.  When there are multiple filters, the rule is the filters that
appear later in the command take precedence over filters that appear earlier in
the command.

Each filter is evaluated against the source directory.  If the source location
is a file instead of a directory, the directory containing the file is used as
the source directory.

Note that, by default, all files are included.  This means that providing only
an @@texinfo:@option{--include}@@ filter will not change what files are
transferred.  @@texinfo:@option{--include} will only re-include files that have
been excluded from an @@texinfo:@option{--exclude}@@ filter.  If you only want
to upload files with a particular extension, you need to first exclude all
files, then re-include the files with the particular extension.

**** Available Commands

#+texinfo:@heading Available Commands

#+attr_texinfo: :indic @code
- cp ::

- ls ::

- mb ::

- mv ::

- presign ::

- rb ::

- rm ::

- sync ::
	  #+cindex:@command{website}
	  #+cindex:@command{static website}
- website :: Set the website configuration for a bucket.
	     : website <S3Uri > [--index-document <value>] [--error-document <value>]

	     The following command configures a bucket named =my-bucket= as a
             static website:

	     : aws s3 website s3://my-bucket/ --index-document index.html --error-document error.html

*** s3 API
<<s3api>>

https://docs.aws.amazon.com/cli/latest/reference/s3api/index.html

*** s3control

AWS S3 Control provides access to Amazon S3 control plane operations.

https://docs.aws.amazon.com/cli/latest/reference/s3control/index.html

** General Resources

** Identity and Access Management
*** IAM User Guide

https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html

**** Getting Started

https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started.html

***** Creating Your First IAM Admin User and Group
<<create-first_IAM-admin>>

https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html

#+cindex:root user
#+cindex:administrator user
#+cindex:Administrators group
#+cindex:group, administrators
#+cindex:AdministratorAccess policy
#+cindex:policy, AdministratorAccess
As a best practice, do not use the AWS account root user for any task where
it's not required.  Instead, create a new IAM user for each person that
requires administrator access.  Then make those users administrators by placing
the users into an "Administrators" group to which you attach the
AdministratorAccess managed policy.

Thereafter, the users in the administrators group should set up the groups,
users, and so on, for the AWS account.  All future interaction should be
through the AWS account's users and their own keys instead of the root user.


However, to perform some account and service management tasks, you must log in
using the root user credentials.  To view the tasks that require you to sign in
as the root user, see [[https://docs.aws.amazon.com/general/latest/gr/aws_tasks-that-require-root.html][AWS Tasks that Require Account Root User]].

#+texinfo:@heading Creating an Administrator IAM User and Group (Console)

This procedure describes how to use the AWS Management Console to create an IAM
user for yourself and add that user to a group that has administrative
permissions from an attached managed policy.

#+texinfo:@heading Creating an IAM User and Group (AWS CLI)

If you followed the steps in the previous section, you used the AWS Management
Console to set up an administrators group while creating the IAM user in your
AWS account.  This procedure shows an alternative way to create a group.

***** Creating a Group---AWS CLI

This section shows how to create a group in the IAM system.

***** Attaching a Policy to the Group---AWS CLI

This section shows how to attach a policy that lets any user in the group
perform any action on any resource in the AWS account.  You do this by
attaching the [[ AWS managed policy][AWS managed policy]] called =AdministratorAccess= to the =Admins=
group.  For more information about policies, see [[https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html][Access Management]].

** SDK for JavaScript Documentation

https://docs.aws.amazon.com/sdk-for-javascript/

The AWS SDK for JavaScript enables developers to build libraries and
applications that use AWS services.  You can use the JavaScript API in the
browser and inside Node.js applications on the server.

#+texinfo:@heading SDK for JavaScript Developer Guide

Introduces you to using JavaScript with AWS services and resources, both in
browser scripts and in Node.js applications.  Describes how to set up the SDK,
connect to AWS services, and access AWS service features.  Also provides
Node.js and browser code examples for working with popular AWS services.

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html

*** What Is the AWS SDK for JavaScript

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html

The AWS SDK for JavaScript provides a JavaScript API for AWS services.  You can
use the JavaScript API to build libraries or applications for Node.js or the
browser.

Not all services are immediately available in the SDK. To find out which
services are currently supported by the AWS SDK for JavaScript, see:

- https://github.com/aws/aws-sdk-js/blob/master/SERVICES.md


#+texinfo:@heading Using the SDK with Node.js

Node.js is a cross-platform runtime for running server-side JavaScript
applications.  You can set up Node.js on an Amazon EC2 instance to run on a
server.  You can also use Node.js to write on-demand AWS Lambda functions.

Using the SDK for Node.js differs from the way in which you use it for
JavaScript in a web browser.  The difference comes from the way in which you
load the SDK and in how you obtain the credentials needed to access specific
web services.  When use of particular APIs differs between Node.js and the
browser, those differences will be called out.

#+texinfo:@heading Using the SDK with AWS Cloud9

You can also develop Node.js applications using the SDK for JavaScript in the
AWS Cloud9 IDE.  For a sample of how to use AWS Cloud9 for Node.js development,
see [[https://docs.aws.amazon.com/cloud9/latest/user-guide//sample-nodejs.html][Node.js Sample for AWS Cloud9]] in the AWS Cloud9 User Guide.

#+texinfo:@heading Using the SDK with AWS Amplify

For browser-based web, mobile, and hybrid apps, you can also use the AWS
Amplify Library on GitHub, which extends the SDK for JavaScript, providing a
declarative interface.

#+texinfo:@heading Using the SDK with Web Browsers

All major web browsers support execution of JavaScript. JavaScript code that is
running in a web browser is often called client-side JavaScript.

Using the SDK for JavaScript in a web browser differs from the way in which you
use it for Node.js.  The difference comes from the way in which you load the
SDK and in how you obtain the credentials needed to access specific web
services.  When use of particular APIs differs between Node.js and the browser,
those differences will be called out.

#+texinfo:@heading Common Use Cases

Using the SDK for JavaScript in browser scripts makes it possible to realize a
number of compelling use cases.  Here are several ideas for things you can
build in a browser application by using the SDK for JavaScript to access
various web services.

- Build a custom console to AWS services in which you access and combine
  features across Regions and services to best meet your organizational or
  project needs.

- Use Amazon Cognito Identity to enable authenticated user access to your
  browser applications and websites, including use of third-party
  authentication from Facebook and others.

- Use Amazon Kinesis to process click streams or other marketing data in real
  time.

- Use Amazon DynamoDB for serverless data persistence such as individual user
  preferences for website visitors or application users.

- Use AWS Lambda to encapsulate proprietary logic that you can invoke from
  browser scripts without downloading and revealing your intellectual property
  to users.


#+texinfo:@heading About the Examples

You can browse the SDK for JavaScript examples in the [[https://docs.aws.amazon.com/code-samples/latest/catalog/code-catalog-javascript.html][AWS Code Sample Catalog]].

*** Getting Started with the AWS SDK for JavaScript

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/getting-started.html

The AWS SDK for JavaScript provides access to web services in either browser
scripts or Node.js.  This section has two getting started exercises that show
you how to work with the SDK for JavaScript in each of these JavaScript
environments.

**** Getting Started in a Browser Script

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/getting-started-browser.html

**** Getting Started in Node.js

[[*Getting Started in Node.js SDK][Getting Started in Node.js SDK]]

*** Setting Up the SDK for JavaScript

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up.html

The topics in this section explain how to install the SDK for JavaScript for
use in web browsers and with Node.js.  It also shows how to load the SDK so you
can access the web services supported by the SDK.

#+texinfo:@heading Installing the SDK for JavaScript

The preferred way to install the AWS SDK for JavaScript for Node.js is to use
~npm~:

: npm install aws-sdk

In the event you see this error message:

: npm WARN deprecated node-uuid@1.4.8: Use uuid module instead

Type these commands at the command line:

: npm uninstall --save node-uuid
: npm install --save uuid

#+texinfo:@subheading Installing Using Bower

[[https://bower.io/][Bower]] is a package manager for the web. After you install Bower, you can use it
to install the SDK. To install the SDK using Bower, type the following into a
terminal window:

: bower install aws-sdk-js

#+texinfo:@subheading The Browser

You don't have to install the SDK to use it in browser scripts. You can load
the hosted SDK package directly from Amazon Web Services with a script in your
HTML pages. The hosted SDK package supports the subset of AWS services that
enforce cross-origin resource sharing (CORS). For more information, see [[load-sdk-for-js-in-browser][Loading
the SDK for JavaScript]].

You can download minified and non-minified distributable versions of the
current AWS SDK for JavaScript from GitHub at:

https://github.com/aws/aws-sdk-js/tree/master/dist

*** Loading the SDK for JavaScript

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-the-jssdk.html

After you install the SDK, you can load the AWS package in your node
application using ~require~.

: var AWS = require('aws-sdk');

#+texinfo:@heading In the Browser
<<load-sdk-for-js-in-browser>>

The quickest way to get started with the SDK is to load the hosted SDK package
directly from Amazon Web Services.  To do this, add a =<script>= element to
your HTML pages in the following form:

: <script src="https://sdk.amazonaws.com/js/aws-sdk-SDK_VERSION_NUMBER.min.js"></script>

To find the current =SDK_VERSION_NUMBER=, see the API Reference for the SDK for
JavaScript at:

https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html.

After the SDK loads in your page, the SDK is available from the global variable
AWS (or ~window.AWS~).

If you bundle your code and module dependencies using [[http://browserify.org/][browserify]], you load the
SDK using require, just as you do in Node.js.

*** Configuring the SDK for JavaScript

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/configuring-the-jssdk.html

#+cindex:configure JS SDK
Before you use the SDK for JavaScript to invoke web services using the API, you
must configure the SDK.  At a minimum, you must configure these settings:

- The /Region/ in which you will request services.

- The /credentials/ that authorize your access to SDK resources.


#+cindex:permisions
In addition to these settings, you may also have to configure /permissions/ for
your AWS resources.  For example, you can limit access to an Amazon S3 bucket
or restrict an Amazon DynamoDB table for read-only access.

The topics in this section describe various ways to configure the SDK for
JavaScript for Node.js and JavaScript running in a web browser.

**** Using the Global Configuration Object

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/global-config-object.html

#+cindex:configure SDK for JS
There are two ways to configure the SDK:

#+cindex:configuration, JS SDK
#+cindex:service object configuration
#+cindex:AWS.Config
#+cindex:global configuration object
- Set the global configuration using ~AWS.Config~.

- Pass extra configuration information to a service object.


#+cindex:global configuration
#+cindex:AWS.Config
#+cindex:service-level configuration
Setting global configuration with ~AWS.Config~ is often easier to get started,
but service-level configuration can provide more control over individual
services.  The global configuration specified by ~AWS.Config~ provides default
settings for service objects that you create subsequently, simplifying their
configuration.  However, you can update the configuration of individual service
objects when your needs vary from the global configuration.

***** Setting Global Configuration

#+cindex:global configuration object
#+cindex:AWS.Config, global configuration object
After you load the ~aws-sdk~ package in your code you can use the AWS global
variable to access the SDK's classes and interact with individual services.
The SDK includes a global configuration object, ~AWS.Config~, that you can use to
specify the SDK configuration settings required by your application.

Configure the SDK by setting ~AWS.Config~ properties according to your
application needs.  The following table summarizes ~AWS.Config~ properties
commonly used to set the configuration of the SDK.

| Configuration Options | Description                                                                             |
|-----------------------+-----------------------------------------------------------------------------------------|
| credentials           | Required. Specifies the credentials used to determine access to services and resources. |
| region                | Required. Specifies the Region in which requests for services are made.                 |
| maxRetries            | Optional. Specifies the maximum number of times a given request is retried.             |
| logger                | Optional. Specifies a logger object to which debugging information is written.          |
| update                | Optional. Updates the current configuration with new values.                            |
|-----------------------+-----------------------------------------------------------------------------------------|

For more information about the configuration object, see [[https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Config.html][Class: AWS.Config]] in
the API Reference.

#+texinfo:@heading Global Configuration Examples

#+cindex:AWS.Config constructor
You must set the Region and the credentials in ~AWS.Config~.  You can set these
properties as part of the ~AWS.Config~ constructor, as shown in the following
browser script example:

#+begin_src js :eval no
  var myCredentials = new AWS.CognitoIdentityCredentials({IdentityPoolId:'IDENTITY_POOL_ID'});
  var myConfig = new AWS.Config({
      credentials: myCredentials,
      region: 'us-west-2'
  });
#+end_src

#+cindex:@code{AWS.Config.update()}
You can also set these properties after creating ~AWS.Config~ using the update
method, as shown in the following example that updates the Region:

#+begin_src js :eval no
myConfig = new AWS.Config();
myConfig.update({region: 'us-east-1'});
#+end_src

#+cindex:@code{getCredentials()} static method of AWS.config
You can get your default credentials by calling the static ~getCredentials()~
method of ~AWS.config~:

#+begin_src js :eval no
var AWS = require("aws-sdk");

AWS.config.getCredentials(function(err) {
  if (err) console.log(err.stack);
  // credentials not loaded
  else {
    console.log("Access key:", AWS.config.credentials.accessKeyId);
    console.log("Secret access key:", AWS.config.credentials.secretAccessKey);
  }
});
#+end_src

#+cindex:@code{AWS.config.region} property
#+cindex:@code{region} property
Similarly, if you have set your region correctly in your config file, you get
that value by setting the =AWS_SDK_LOAD_CONFIG= environment variable is set to
a truthy value and calling the static =region= property of ~AWS.config~:

#+begin_src js :eval no
var AWS = require("aws-sdk");

console.log("Region: ", AWS.config.region);
#+end_src

***** Setting Configuration Per Service

#+cindex:service configuration
Each service that you use in the SDK for JavaScript is accessed through a
service object that is part of the API for that service.  For example, to
access the Amazon S3 service you create the Amazon S3 service object.  You can
specify configuration settings that are specific to a service as part of the
constructor for that service object.  When you set configuration values on a
service object, the constructor takes all of the configuration values used by
~AWS.Config~, including credentials.

For example, if you need to access Amazon EC2 objects in multiple Regions,
create an EC2 service object for each Region and then set the Region
configuration of each service object accordingly.

: var ec2_regionA = new AWS.EC2({region: 'ap-southeast-2', maxRetries: 15, apiVersion: '2014-10-01'});
: var ec2_regionB = new AWS.EC2({region: 'us-east-1', maxRetries: 15, apiVersion: '2014-10-01'});

You can also set configuration values specific to a service when configuring
the SDK with ~AWS.Config~.  The global configuration object supports many
service-specific configuration options.  For more information about
service-specific configuration, see [[https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Config.html][Class: AWS.Config]] in the AWS SDK for
JavaScript API Reference.

***** Immutable Configuration Data

Global configuration changes apply to requests for all newly created service
objects.  Newly created service objects are configured with the current global
configuration data first and then any local configuration options.  Updates you
make to the global AWS.config object don't apply to previously created service
objects.

Existing service objects must be manually updated with new configuration data
or you must create and use a new service object that has the new configuration
data.  The following example creates a new Amazon S3 service object with new
configuration data:

: s3 = new AWS.S3(s3.config);

**** Setting the AWS Region

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-region.html

#+cindex:Region
A /Region/ is a named set of AWS resources in the same geographical area.  An
example of a Region is =us-east-1=, which is the US East (N. Virginia) Region.
You specify a Region when configuring the SDK for JavaScript so that the SDK
accesses the resources in that Region.  Some services are available only in
specific Regions.

#+cindex:Regionn, set
The SDK for JavaScript doesn't select a Region by default.  However, you can
set the Region using an environment variable, a shared config file, or the
global configuration object.

***** In a Client Class Constructor

When you instantiate a service object, you can specify the Region for that
resource as part of the client class constructor, as shown here

: var s3 = new AWS.S3({apiVersion: '2006-03-01', region: 'us-west-2'});

***** Using the Global Configuration Object

To set the Region in your JavaScript code, update the ~AWS.Config~ global
configuration object as shown here.

: AWS.config.update({region: 'us-east-1'});

***** Using an Environment Variable

You can set the Region using the =AWS_REGION= environment variable.  If you
define this variable, the SDK for JavaScript reads it and uses it.

***** Using a Shared Config File

#+cindex:shared config file
#+cindex:config file, shared
#+cindex:@env{AWS_SDK_LOAD_CONFIG} environment variable
Much like the shared credentials file lets you store credentials for use by the
SDK, you can keep your Region and other configuration settings in a shared file
named ~config~ that is used by SDKs.  If the =AWS_SDK_LOAD_CONFIG= environment
variable has been set to a truthy value, the SDK for JavaScript automatically
searches for a ~config~ file when it loads.  Where you save the ~config~ file
depends on your operating system:

- Linux, macOS, or Unix users: ~/.aws/config

- Windows users: C:\Users\USER_NAME\.aws\config

If you don't already have a shared ~config~ file, you can create one in the
designated directory.  In the following example, the ~config~ file sets both
the Region and the output format.

#+begin_example
[default]
   region=us-west-2
   output=json
#+end_example

***** Order of Precedence for Setting the Region

The order of precedence for Region setting is as follows:

- If a Region is passed to a client class constructor, that Region is used.  If
  not, then...

- If a Region is set on the global configuration object, that Region is used.
  If not, then...

- If the =AWS_REGION= environment variable is a truthy value, that Region is
  used.  If not, then...

- If the =AMAZON_REGION= environment variable is a truthy value, that Region is
  used.  If not, then...

- If the =AWS_SDK_LOAD_CONFIG= environment variable is set to a truthy value
  and the shared credentials file (=~/.aws/credentials= or the path indicated
  by =AWS_SHARED_CREDENTIALS_FILE=) contains a Region for the configured
  profile, that Region is used.  If not, then...

- If the =AWS_SDK_LOAD_CONFIG= environment variable is set to a truthy value
  and the config file (=~/.aws/config= or the path indicated by
  =AWS_CONFIG_FILE=) contains a Region for the configured profile, that Region
  is used.

**** Specifying Custom Endpoints

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/specifying-endpoints.html

Calls to API methods in the SDK for JavaScript are made to service endpoint
URIs.  By default, these endpoints are built from the Region you have
configured for your code.  However, there are situations in which you need to
specify a custom endpoint for your API calls.

**** Getting Your Credentials

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/getting-your-credentials.html

#+cindex:root credentials
When you create an AWS account, your account is provided with root credentials.
Those credentials consist of two access keys:

- Access key ID
- Secret access key


For more information on your access keys, see Understanding and Getting Your
Security Credentials in the AWS General Reference.

#+cindex:access keys
#+cindex:access key ID
#+cindex:secret access key
Access keys consist of an access key ID and secret access key, which are used
to sign programmatic requests that you make to AWS.  If you don't have access
keys, you can create them from the AWS Management Console.  As a best practice,
do not use the AWS account root user access keys for any task where it's not
required.  Instead, create a [[create-first_IAM-admin][new administrator IAM user]] with access keys for
yourself.

#+texinfo:@heading To create access keys for an IAM user

1. AWS Management Console

2. Users

3. Choose User; choose *Security credentials* tab

4. *Access keys* section; choose *Create access keys*

5. Choose *Show*

6. Choose *Download .csv file*

7. Choose *Close*

**** Setting Credentials

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-credentials.html

#+cindex:credentials
AWS uses credentials to identify who is calling services and whether access to
the requested resources is allowed.  In AWS, these credentials are typically
the /access key ID/ and the /secret access key/ that were created along with
your account.

Whether running in a web browser or in a Node.js server, your JavaScript code
must obtain valid credentials before it can access services through the API.
Credentials can be set globally on the configuration object, using
~AWS.Config~, or per service, by passing credentials directly to a service
object.

There are several ways to set credentials that differ between Node.js and
JavaScript in web browsers.  The topics in this section describe how to set
credentials in Node.js or web browsers.  In each case, the options are
presented in recommended order.

#+texinfo:@heading Best Practices for Credentials

Properly setting credentials ensures that your application or browser script
can access the services and resources needed while minimizing exposure to
security issues that may impact mission critical applications or compromise
sensitive data.

An important principle to apply when setting credentials is to always grant the
least privilege required for your task.  It's more secure to provide minimal
permissions on your resources and add further permissions as needed, rather
than provide permissions that exceed the least privilege and, as a result, be
required to fix security issues you might discover later.  For example, unless
you have a need to read and write individual resources, such as objects in an
Amazon S3 bucket or a DynamoDB table, set those permissions to read only.

For more information on granting the least privilege, see the [[https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege][Grant Least
Privilege]] section of the Best Practices topic in the IAM User Guide.

For more information about how to manage your access keys, see [[https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html][Best Practices
for Managing AWS Access Keys]] in the AWS General Reference.

**** Setting Credentials in Node.js

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-credentials-node.html

#+cindex:credentials, set
There are several ways in Node.js to supply your credentials to the SDK.  Some
of these are more secure and others afford greater convenience while developing
an application.  When obtaining credentials in Node.js, be careful about
relying on more than one source such as an environment variable and a JSON file
you load.  You can change the permissions under which your code runs without
realizing the change has happened.

Here are the ways you can supply your credentials in order of recommendation:

1. Loaded from AWS Identity and Access Management (IAM) roles for Amazon EC2

2. Loaded from the shared credentials file (=~/.aws/credentials=)

3. Loaded from environment variables

4. Loaded from a JSON file on disk

5. Other credential-provider classes provided by the JavaScript SDK


If more than one credential source is available to the SDK, the default
precedence of selection is as follows:

1. Credentials that are explicitly set through the service-client constructor

2. Environment variables

3. The shared credentials file

4. Credentials loaded from the ECS credentials provider (if applicable)

5. Credentials that are obtained by using a credential process specified in the
   shared AWS config file or the shared credentials file. For more information,
   see Loading Credentials in Node.js using a Configured Credential Process.

6. Credentials loaded from AWS IAM using the credentials provider of the Amazon
   EC2 instance (if configured in the instance metadata)


The topics in this section describe how to load credentials into Node.js.

***** Loading Credentials in Node.js from IAM Roles for EC2

***** Loading Credentials for a Node.js Lambda Function

***** Loading Credentials in NodeJS from the Shared Credentials File
<<shared-credentials-file>>

#+cindex:credentials, loading in Node.js
#+cindex:shared credentials file
You can keep your AWS credentials data in a shared file used by SDKs and the
command line interface.

#+begin_cartouche
*When the SDK for JavaScript loads, it automatically searches the shared
credentials file, which is named "credentials".*
#+end_cartouche

Where you keep the shared credentials file depends on your operating system:

- The shared credentials file on Linux, Unix, and macOS: =~/.aws/credentials=

- The shared credentials file on Windows: =C:\Users\USER_NAME\.aws\credentials=


If you do not already have a shared credentials file, see [[*Getting Your Credentials][Getting Your
Credentials]].

#+cindex:credentials file, shared
#+cindex:shared credentials file
#+cindex:access_key_id
#+cindex:secret_access_key
Once you follow those instructions, you should see text similar to the
following in the credentials file, where =<YOUR_ACCESS_KEY_ID>= is your access
key ID and =<YOUR_SECRET_ACCESS_KEY>= is your secret access key:

#+begin_example
[default]
aws_access_key_id = <YOUR_ACCESS_KEY_ID>
aws_secret_access_key = <YOUR_SECRET_ACCESS_KEY>
#+end_example

#+cindex:profiles
The =[default]= section heading specifies a default profile and associated
values for credentials.  You can create additional profiles in the same shared
configuration file, each with its own credential information.  The following
example shows a configuration file with the default profile and two additional
profiles:

#+begin_example
[default] ; default profile
aws_access_key_id = <DEFAULT_ACCESS_KEY_ID>
aws_secret_access_key = <DEFAULT_SECRET_ACCESS_KEY>
    
[personal-account] ; personal account profile
aws_access_key_id = <PERSONAL_ACCESS_KEY_ID>
aws_secret_access_key = <PERSONAL_SECRET_ACCESS_KEY>
    
[work-account] ; work account profile
aws_access_key_id = <WORK_ACCESS_KEY_ID>
aws_secret_access_key = <WORK_SECRET_ACCESS_KEY>
#+end_example

#+cindex:@env{AWS_PROFILE} environment variable
By default, the SDK checks the =AWS_PROFILE= environment variable to determine
which profile to use.  If the =AWS_PROFILE= variable is not set in your
environment, the SDK uses the credentials for the =[default]= profile.  To use
one of the alternate profiles, set or change the value of the =AWS_PROFILE=
environment variable.  For example, given the configuration file shown above,
to use the credentials from the work account, set the =AWS_PROFILE= environment
variable to =work-account= (as appropriate for your operating system).

After setting the environment variable (if needed), you can run a file named
~script.js~ that uses the SDK as follows:

: $ node script.js

#+cindex:prcess.env.AWS_PROFILE
#+cindex:credential provider
You can also explicitly select the profile used by the SDK, either by setting
~process.env.AWS_PROFILE~ before loading the SDK, or by selecting the
credential provider as shown in the following example:

#+cindex:AWS.config.credentials
#+begin_src js :eval no
#+cindex:SharedIniFileCredentials
var credentials = new AWS.SharedIniFileCredentials({profile: 'work-account'});
AWS.config.credentials = credentials;
#+end_src

***** Loading Credentials in Node.js from Environment Variables

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-environment.html

#+cindex:credential environment variables
#+cindex:AWS_ACCESS_KEY_ID
#+cindex:AWS_SECRET_ACCESS_KEY
#+cindex:AWS_SESSION_TOKEN
The SDK automatically detects AWS credentials set as variables in your
environment and uses them for SDK requests, eliminating the need to manage
credentials in your application.  The environment variables that you set to
provide your credentials are:

- =AWS_ACCESS_KEY_ID=
- =AWS_SECRET_ACCESS_KEY=
- =AWS_SESSION_TOKEN= (optional)

***** Loading Credentials in Node.js from a JSON File

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-json-file.html

#+cindex:@file{config.json} configuration file
#+cindex:JSON configuration file
You can load configuration and credentials from a JSON document on disk using
~AWS.config.loadFromPath()~.  The path specified is relative to the current
working directory of your process.  For example, to load credentials from a
~config.json~ file with the following content:

: { "accessKeyId": <YOUR_ACCESS_KEY_ID>, "secretAccessKey": <YOUR_SECRET_ACCESS_KEY>, "region": "us-east-1" }

#+cindex:@code{AWS.config.loadFromPath()}
Use the following command:

: AWS.config.loadFromPath('./config.json');

Loading credentials from a JSON document is not supported in browser scripts.

***** Loading Credentials in Node.js using a Configured Credential Process

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-configured-credential-process.html

You can source credentials by using a method that isn't built into the SDK.  To
do this, specify a credential process in the shared AWS conﬁg file or the
shared credentials file.  If the AWS_SDK_LOAD_CONFIG environment variable is
set to a truthy value, the SDK will prefer the process specified in the config
file over the process specified in the credentials file (if any).

**** Setting Credentials in a Web Browser

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-credentials-browser.html

There are several ways to supply your credentials to the SDK from browser
scripts.  Some of these are more secure and others afford greater convenience
while developing a script.  Here are the ways you can supply your credentials
in order of recommendation:

1. Using Amazon Cognito Identity to authenticate users and supply credentials

2. Using web federated identity

3. Hard coded in the script [fn:1]


***** Using Amazon Cognito Identity to Authenticate Users

***** Using Web Federated Identity to Authenticate Users

***** Web Federated Identity Examples

**** Locking API Versions

**** Node.js Considerations

**** Browser Script Considerations

**** Bundling Applications with Webpack

**** SDK Metrics in the AWS SDK for JavaScript

*** API Reference

Describes in detail all the API operations for the AWS SDK for JavaScript.  In
addition, it provides sample requests, responses, and errors for the supported
web services protocols.

https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/

*** Code Sample Catelog

Contains code examples and other types of examples to help accelerate your
development of applications that work with AWS services.  The examples show how
to perform specific tasks for AWS services using various programming languages
and supported technologies.  Be aware that the PDF is over 25 MB.

https://docs.aws.amazon.com/code-samples/latest/catalog/welcome.html
** SDKs and Toolkits

https://docs.aws.amazon.com/index.html

https://aws.amazon.com/getting-started/tools-sdks/

*** Command Line Interface
https://aws.amazon.com/cli/

*** JavaScript
https://aws.amazon.com/sdk-for-browser/

*** Python
https://aws.amazon.com/sdk-for-python/

*** PHP
https://aws.amazon.com/sdk-for-php/

*** .NET
https://aws.amazon.com/sdk-for-net/

*** Ruby
https://aws.amazon.com/sdk-for-ruby/

*** Java
https://aws.amazon.com/sdk-for-java/

*** Go
https://aws.amazon.com/sdk-for-go/

*** Node
https://docs.aws.amazon.com/sdk-for-javascript/

https://aws.amazon.com/sdk-for-node-js/

*** C++
https://aws.amazon.com/sdk-for-cpp/

*** Android
https://docs.aws.amazon.com/aws-mobile/latest/developerguide/getting-started.html

*** iOS
https://docs.aws.amazon.com/aws-mobile/latest/developerguide/getting-started.html

** Tutorials and Projects

#+texinfo:@heading Learn with Introductory Tutorials & Projects

- [[https://aws.amazon.com/getting-started/][Tutorials]]

* AWS Developer Center

“Welcome developers!  The AWS Developer Center is your homepage for the AWS
developer community.  Build your first application on AWS, dig into our
technical documentation, or share your ideas with the community worldwide.”

https://aws.amazon.com/developer/

#+texinfo:@heading Build Your First Application

Dive into AWS and build your first web application.  In this tutorial, you'll
learn to build and deploy a web application on AWS, connect your app to a
backend database, and capture & analyze data on user behavior.

- [[https://aws.amazon.com/getting-started/projects/build-modern-app-fargate-lambda-dynamodb-python/][Start Tutorial]]

** Choose Your Programming Language
*** Explore Java on AWS
https://aws.amazon.com/developer/language/java/

*** Explore Javascript on AWS
https://aws.amazon.com/developer/language/javascript/

*** Explore Python on AWS
https://aws.amazon.com/developer/language/python/

*** Explore Ruby on AWS
https://aws.amazon.com/developer/language/ruby/

*** AWS SDK for Go
https://aws.amazon.com/sdk-for-go/

*** AWS SDK for C++
https://aws.amazon.com/sdk-for-cpp/

** CloudFront Developer Guide

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html

*** What CloudFront Is

#+cindex:edge location
Amazon CloudFront is a web service that speeds up distribution of your static
and dynamic web content, such as .html, .css, .js, and image files, to your
users.  CloudFront delivers your content through a worldwide network of data
centers called /edge locations/.  When a user requests content that you're
serving with CloudFront, the user is routed to the edge location that provides
the lowest latency (time delay), so that content is delivered with the best
possible performance.

#+cindex:origin
- If the content is already in the edge location with the lowest latency,
  CloudFront delivers it immediately.

- If the content is not in that edge location, CloudFront retrieves it from an
  /origin/ that you've defined---such as an Amazon S3 bucket, a MediaPackage
  channel, or an HTTP server (for example, a web server) that you have
  identified as the source for the definitive version of your content.


#+cindex:latency
#+cindex:edge location
#+cindex:edge server
CloudFront speeds up the distribution of your content by routing each user
request through the AWS backbone network to the edge location that can best
serve your content.  Typically, this is a CloudFront edge server that provides
the fastest delivery to the viewer.  Using the AWS network dramatically reduces
the number of networks that your users' requests must pass through, which
improves performance.  Users get lower /latency/---the time it takes to load
the first byte of the file—and higher data transfer rates.

**** Use Cases

**** How CloudFront Delivers Content

**** Locations and IP Addresses of CloudFront Edge Servers

**** Accessing CloudFront

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/introduction-accessing-cloudfront.html

#+cindex:CloudFront, ways to access
You can access Amazon CloudFront in the following ways:

#+attr_texinfo: :indic b
- AWS Management Console :: The procedures throughout this guide explain how to
     use the AWS Management Console to perform tasks.

- AWS SDKs :: 

	      If you're using a programming language that AWS provides an SDK
              for, you can use an SDK to access CloudFront.  SDKs simplify
              authentication, integrate easily with your development
              environment, and provide access to CloudFront commands.

  - see [[https://aws.amazon.com/tools][Tools for Amazon Web Services]]

- CloudFront API ::

		    If you're using a programming language that an SDK isn't
                    available for, see [[https://docs.aws.amazon.com/cloudfront/latest/APIReference/][the Amazon CloudFront API Reference]] for
                    information about API actions and about how to make API
                    requests.

- AWS Command Line Interface ::

     For more information, see [[https://docs.aws.amazon.com/cli/latest/userguide/][Getting Set Up with the AWS Command Line
     Interface]] in the AWS Command Line Interface User Guide.

**** How to Get Started with CloudFront

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/welcome-how-to-get-started.html

For information about getting started with Amazon CloudFront, see the following
topics in this guide:

- [[*Setting Up][Setting Up Amazon CloudFront]] :: which explains how to sign up for AWS, how to
     secure access to your AWS account, and how to set up programmatic access
     to CloudFront.

- [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/GettingStarted.html][Getting Started with Amazon CloudFront]] :: which describes how to create a
     distribution that can serve content to viewers from your origin, like an
     Amazon S3 bucket or a website, and then test that it works.

**** AWS Identity and Access Management

**** CloudFront Pricing
*** Setting Up

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/setting-up-cloudfront.html

1. Sign up for AWS
2. Access Your Account
3. Create an IAM User
4. Set Up the AWS Tools for Windows PowerShell

   For information about how to install and configure the AWS CLI, see [[https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-set-up.html][Getting
   Set Up with the AWS Command Line Interface]] in the AWS Command Line Interface
   User Guide.

5. Download an AWS SDK

   If you're using a programming language that AWS provides an SDK for, we
   recommend that you use an SDK instead of the Amazon CloudFront API.  The
   SDKs make authentication simpler, integrate easily with your development
   environment, and provide easy access to CloudFront commands.

   For more information, see [[https://aws.amazon.com//tools/][Tools for Amazon Web Services]]

*** Getting Started with CloudFront

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/GettingStarted.html

#+cindex:CloudFront, getting started
Get started with the basic steps to deliver your content with CloudFront by
creating a simple CloudFront distribution.

[[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/GettingStarted.SimpleDistribution.html][Getting Started with a Simple CloudFront Distribution]]

The procedures in this section show you how to use CloudFront to set up a basic
configuration that does the following:

- /Stores/ the original versions of your objects in one Amazon Simple Storage
  Service (Amazon S3) bucket
- /Distributes/ content such as text or graphics
- Makes your objects /accessible/ to everyone
- Uses the CloudFront /domain name/ in URLs for your objects (for example,
  =http://d111111abcdef8.cloudfront.net/image.jpg=)
- Keeps your objects in CloudFront /edge locations/ for the default duration of
  24 hours (the minimum duration is 0 seconds)


Most of these options are customizable.  For example, you can store your
content on your own web server instead of using an S3 bucket, and you can limit
who has access to the content by using signed URLs or cookies.  For information
about how to customize your CloudFront distribution options, see:
- [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-creating.html][Steps for Creating a Distribution (Overview)]]


You have to complete only a few basic steps to start delivering your content
with CloudFront.

- The first step is signing up.

- After that, you create a CloudFront distribution, and

- then use the CloudFront domain name in URLs in your webpages or applications
  to reference the content.

#+cindex:CloudFront getting started
#+cindex:CloudFront, simple distribution
**** Step 1---Upload Your Content to Amazon S3 and Grant Object Permissions

CloudFront can distribute almost any type of file for you using an Amazon S3
bucket as the source, and there is no limit to the amount of data that you can
store on Amazon S3.

#+cindex:private
#+cindex:permissions, grant
By default, your Amazon S3 bucket and all the files in it are private---only
the AWS account that created the bucket has read/write permission to the files.
If you want to allow anyone to access the files in your Amazon S3 bucket using
CloudFront URLs, you must grant public read permissions to the objects.  You
must explicitly grant permissions to each object in an Amazon S3 bucket.

#+cindex:private content feature
If you want to restrict who can download your content, you can use the
CloudFront private content feature.  For more information about distributing
private content:

- see [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html][Serving Private Content with Signed URLs and Signed Cookies]].


***** Upload your content to Amazon S3 and grant read permissions to everyone

1. open the Amazon S3 console

2. choose *Create bucket*

3. on the Name and region page, do the following:

   - enter a bucket name

   - choose an AWS Region

4. choose *Next*

5. on the *Configure options* page, choose options for versioning, tagging, and
   other features.

6. choose *Next*

7. on the *Set permissions* page, clear the following check box:

   - *Block all public access*

     #+cindex:private content feature
     #+cindex:public read access, allow
     You must allow public read access to the bucket and files so that
     CloudFront URLs can serve content from the bucket.  However, you can
     restrict access to specific content by using the CloudFront private
     content feature.

     - see [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html][Serving Private Content with Signed URLs and Signed Cookies]]

8. choose *Next*, and then choose *Create bucket*.

9. In the *Buckets* pane, choose your bucket, and then choose *Upload*.

10. choose *Add files*, and then choose the files that you want to upload.

11. choose *Next*

12. On the *Set permissions* page, grant public read privileges for each file
    that you upload to your Amazon S3 bucket.

    - choose *Next* to set permissions

    - for *Manage public permissions*, choose *Grant public read access to this
      object(s)*

    - choose *Next*

13. Set any properties that you want for the object, such as encryption or
    tagging, and then choose *Next*

14. choose *Upload*


Use your Amazon S3 URL to verify that your content is publicly accessible.

**** Step 2---Create a CloudFront Distribution

#+texinfo:@heading To create a CloudFront distribution:

1. Open the [[https://console.aws.amazon.com/cloudfront/][CloudFront console]]

2. Choose *Create Distribution*.

3. On the *Select a delivery method for your content* page, in the *Web*
   section, choose *Get Started*.

   The options are:

   - *Web* to create a web distribution for static and dynamic content, media
     file over HTTP/HTTPS, deal with objects, and serve live streaming events
     in real time;
   - *RTMP* for streaming media files using Adobe Flash Media Server's RTMP
     protocol.

4. On the *Create Distribution* page, for *Origin Domain Name*, choose the
   Amazon S3 bucket that you created earlier.  For *Origin Path*, *Origin ID*,
   *Restrict Bucket Access*, and *Origin Custom Headers*, accept the default
   values.

   - *Origin Domain Name* ::
	#+cindex:domain name, origin
	#+cindex:origin domain name
	Specify the domain name for your /origin/ --- the Amazon S3 bucket, AWS
        MediaPackage channel endpoint, AWS MediaStore container endpoint, or
        web server from which you want CloudFront to get your web content.  The
        files in your origin must be *publicly readable* if you are not using
        an OAI.

	The dropdown list contains the available AWS resources in the current
        AWS account.  To use a resource from a different AWS account, type the
        domain name of the resource.

   - *Origin Path* :: Optional.
		      #+cindex:origin path
		      If you want CloudFront to request your content from a
                      directory in your Amazon S3 bucket or your custom origin,
                      enter the directory name here, beginning with a =/=.  Do
                      not include a =/= at the end of the directory name.

		      CloudFront appends the directory name to the value of
                      Origin Domain Name when forwarding the request to your
                      origin.

5. Under *Default Cache Behavior Settings*, accept the default values.
   #+cindex:path pattern
   - *Path Pattern* ::

		       The default cache behavior only allows a path pattern of
                       =*= (forward all requests to the origin specified by
                       Origin).  To change the behavior or the routing for
                       other requests (for example, ~*.jpg~), add more cache
                       behaviors after you create the distribution.

     For more information about cache behavior options,

     - Cache [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior][Behavior Settings]].

   - *Viewer Protocol Policy* ::

	The options are:

     - HTTP and HTTPS (default)
     - Redirect HTTP to HTTPS
     - HTTP only

     If you want CloudFront to allow viewers to access your web content
     using either HTTP or HTTPS, specify *HTTP and HTTPS*.  If you want
     CloudFront to redirect all HTTP requests to HTTPS, specify *Redirect
     HTTP to HTTPS*. If you want CloudFront to require HTTPS, specify *HTTPS
     Only*.

6. Under *Distribution Settings*, choose the values for your distribution.

   - *Alternate Domain Names (CNAMES)* ::

	You must list any custom domain names that you use in addition to the
        CloudFront domain name for the URLs for your files.  Specify up to 100
        CNAMEs separated with commas or put each on a new line.

	You also must create a CNAME record with your DNS service to route
        queries for the custome domain to the CloudFront domain.

   - *SSL Certificate* ::

	The options are:

     - /Default CloudFront Certificate/ (~*.cloudfront.net~) --- Choose this
       option if you want your users to use HTTPS or HTTP to access your
       content with the CloudFront domain name.

     - /Custom SSL Certificate/ (~example.com~) --- Choose this option if you
       want your users to access your content by using an alternate domain
       name.  You can use a certificate stored in AWS Certificate Manager (ACM)
       in the US East (N. Virginia) Region.

   - *Default Root Object* :: Optional.

	The object that you want CloudFront to return (for example,
        ~index.html~) when a viewer request points to your root URL instead of
        to a specific object in your distribution.

   - *Logging* :: Select whether you want CloudFront to log all viewer requests
                  for files in your distribution.  You are charged for access
                  logs.

7. Choose *Create Distribution*.

8. After CloudFront creates your distribution, the value of the *Status* column
   for your distribution changes from *In Progress* to *Deployed*.  This
   typically takes between 20 and 40 minutes.  The domain name that CloudFront
   assigns to your distribution appears in the list of distributions.

**** Step 3---Test Your Links

After you've created your distribution, CloudFront knows where your Amazon S3
origin server is, and you know the domain name associated with the
distribution.  You can create a link to your Amazon S3 bucket content with that
domain name and have CloudFront serve it.

*** Working with Distributions

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html

You create a CloudFront distribution to tell CloudFront where you want content
to be delivered from, and the details about how to track and manage content
delivery.  The following topics explain some basics about CloudFront
distributions and provide detailed information about the settings you can
choose to configure your distributions to meet your business needs.

**** Overview of Distributions

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview.html

#+cindex:CloudFront distributions, overview
When you want to use CloudFront to distribute your content, you create a
/distribution/ and choose the /configuration settings/ you want.  For example:

#+texinfo:@heading CloudFront Configuration Settings

- Your content origin---the Amazon S3 bucket, MediaPackage channel, or HTTP
  server from which CloudFront gets the files to distribute.  You can specify
  any combination of up to 25 Amazon S3 buckets, channels, and/or HTTP servers
  as your origins.

- Access---whether you want the files to be available to everyone or restrict
  access to some users.

- Security---whether you want CloudFront to require users to use HTTPS to
  access your content.

- Cookie or query-string forwarding---whether you want CloudFront to forward
  cookies or query strings to your origin.

- Geo-restrictions---whether you want CloudFront to prevent users in selected
  countries from accessing your content.

- Access logs---whether you want CloudFront to create access logs that show
  viewer activity.


#+cindex:distributions limit
#+cindex:quota, distributions
For the current limit on the number of distributions that you can create for
each AWS account, see [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html#limits-web-distributions][General Quotas on Web Distributions]].  The number of files
that you can serve per distribution is unlimited.

#+texinfo:@heading Type of Content a Distribution can Server

- Static and dynamic download content

- Video on demand in different formats

- A live event, such as a meeting, conference, or concert, in real time

***** Actions You Can Use with Distributions

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-actions.html

The following table lists the CloudFront actions that you can take to work with
distributions and provides links to the corresponding documentation on how to
do the actions with the CloudFront console and the CloudFront API.

- [[https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html][Create a distribution]]

- [[https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_ListDistributions.html][List your distributions]]

- [[https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistribution.html][Get all information about a distribution]]

- [[https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_GetDistributionConfig.html][Get the distribution configuration]]

- [[https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html][Update a distribution]]

- [[https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_DeleteDistribution.html][Delete a distribution]]

***** Required Fields for Create Distribution and Update Distribution

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-overview-required-fields.html

#+cindex:distribution, required fileds
#+cindex:required fields, distributions
#+cindex:update distribution, required fields
When you update a distribution by using the [[https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html][UpdateDistribution]] CloudFront API
action, there are more required fields than when you create a distribution by
using CreateDistribution.  Review the following tables for a summary of the
fields that are required for creating and for updating a distribution.

- DistributionConfig

- CacheBehavior

**** Creating Updating and Deleting Distributions

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-create-delete.html

**** Using Different Origins

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DownloadDistS3AndCustomOrigins.html

**** Using Custom URLs

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html

**** Using WebSockets

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.websockets.html

*** Adding Removing Replacing Content

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AddRemoveReplaceObjects.html

This section explains how to make sure CloudFront can access the content that
you want to be served to your viewers, how to specify the objects in your
website or in your application, and how to remove or replace content.


**** Adding and Accessing Content That CloudFront Distributes

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AddingObjects.html

When you want CloudFront to distribute content (objects), you add files to one
of the origins that you specified for the distribution, and you expose a
CloudFront link to the files.  A CloudFront edge location doesn't fetch the new
files from an origin until the edge location receives viewer requests for them.

#+cindex:MIME type
#+cindex:Content-Type header field
CloudFront servers don't determine the MIME type for the objects that they
serve.  When you upload a file to your origin, we recommend that you set the
Content-Type header field for it.

**** Updating Existing Content with a CloudFront Distribution

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/UpdatingExistingObjects.html

There are two ways to update existing content that CloudFront is set up to
distribute for you:

- Update files by using the same name

- Update by using a version identifier in the file name


We recommend that you use a version identifier in file names or in folder
names, to help give you more control over managing the content that CloudFront
serves.

#+texinfo:@heading Updating Existing Files Using Versioned File Names

When you update existing files in a CloudFront distribution, we recommend that
you include some sort of version identifier either in your file names or in
your directory names to give yourself better control over your content.  This
identifier might be a date-time stamp, a sequential number, or some other
method of distinguishing two versions of the same object.

#+texinfo:@heading Updating Existing Content Using the Same File Names

Although you can update existing files in a CloudFront distribution and use the
same file names, we don't recommend it. CloudFront distributes files to edge
locations only when the files are requested, not when you put new or updated
files in your origin.

If you update an existing file in your origin with a newer version that has the
same name, an edge location won't get that new version from your origin until
both of the following occur:

- The old version of the file in the cache expires.

- There's a user request for the file at that edge location.


If you use the same names when you replace files, you can't control when
CloudFront starts to serve the new files.  By default, CloudFront caches files
in edge locations for 24 hours.  For example, if you're replacing all of the
files on an entire website:

- Files for the less popular pages may not be in any edge locations. The new
  versions of these files will start being served on the next request.

- Files for some pages may be in some edge locations and not in others, so your
  end users will see different versions depending on which edge location
  they're served from.

- New versions of the files for the most popular pages might not be served for
  up to 24 hours because CloudFront might have retrieved the files for those
  pages just before you replaced the files with new versions.

**** Removing Content so CloudFront Won't Distribute It

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RemovingObjects.html

You can remove files from your origin that you no longer want to be included in
your CloudFront distribution.  However, CloudFront will continue to show
viewers content from the edge cache until the files expire.

If you want to remove a file right away, you must do one of the following:

- Invalidate the file :: see [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html][Invalidating Files]]

- Use file versioning :: When you use versioning, different versions of a file
     have different names that you can use in your CloudFront distribution, to
     change which file is returned to viewers.

**** Customizing the URL Format for Files in CloudFront

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/LinkFormat.html

After you set up your origin with the objects (content) that you want
CloudFront to serve to your viewers, you must use the correct URLs to reference
those objects in your website or application code so that CloudFront can serve
it.

#+pindex:domain name
#+cindex:CloudFront domain name
#+cindex:alternate domain name
#+cindex:SSL/TLS certificate
The domain name that you use in the URLs for objects on your web pages or in
your web application can be either of the following:

- The domain name that CloudFront automatically assigns when you create a
  distribution

- Your own (alternate) domain name.  You must own the domain name, or have
  authorization to use it, which you verify by adding an SSL/TLS certificate.

  If you add a CNAME (alias) to your distribution, you must also do the
  following:

  - Create (or update) a CNAME record with your DNS service to route queries
    for the CNAME to the CloudFront domain name;

  - Add a certificate to CloudFront from a trusted certificate authority (CA)
    that covers the domain name (CNAME) that you add to your distribution, to
    validate your authorization to use the domain name.


When you specify URLs for directories in your CloudFront distribution, choose
either to always use a trailing slash or to never use a trailing slash.  Both
formats work to link to CloudFront objects, but being consistent can help
prevent issues when you want to invalidate a directory later.  CloudFront
stores URLs exactly as they are defined, including trailing slashes.  So if
your format is inconsistent, you'll need to invalidate directory URLs with and
without the slash, to ensure that CloudFront removes the directory.

**** Invalidating Files

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Invalidation.html

**** Serving Compressed Files

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html

You can configure CloudFront to automatically compress files of certain types
and serve the compressed files when viewer requests include Accept-Encoding:
gzip in the request header.  When content is compressed, downloads are faster
because the files are smaller—in some cases, less than a quarter the size of
the original.  Especially for JavaScript and CSS files, faster downloads
translates into faster rendering of web pages for your users.  In addition,
because the cost of CloudFront data transfer is based on the total amount of
data served, serving compressed files is less expensive than serving
uncompressed files.

#+cindex:gzip
#+begin_cartouche
A viewer request must include =Accept-Encoding: gzip= in the request header, or
CloudFront won't compress the requested file.
#+end_cartouche

If you're using a custom or Amazon S3 origin, you can configure your origin to
compress files with or without CloudFront compression.  Your origin can
compress file types that CloudFront doesn't compress.

*** Configuring Secure Access and Limiting Access to Content

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecurityAndPrivateContent.html

#+cindex:secure access, CloudFront
For web distributions, CloudFront provides several options for securing content
that it delivers, including configuring HTTPS connections, using AWS WAF to
control access to your content, or setting up field-level encryption for
specific content fields. 

In addition, you can prevent users in specific geographic locations from
accessing content distributed through a web distribution.

You also have the option of limiting access to private content by requiring
that users access that content by using CloudFront signed URLs or signed
cookies.

**** Using HTTPS with CloudFront

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html

For web distributions, you can configure CloudFront to require that viewers use
HTTPS to request your objects, so that connections are encrypted when
CloudFront communicates with viewers.  You also can configure CloudFront to use
HTTPS to get objects from your origin, so that connections are encrypted when
CloudFront communicates with your origin.

***** Requiring HTTPS for Communication Between Viewers and CloudFront

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html

***** Requiring HTTPS for Communication Between CloudFront and Your Custom Origin

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-cloudfront-to-custom-origin.html

***** Requiring HTTPS for Communication Between CloudFront and Your Amazon S3 Origin

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-cloudfront-to-s3-origin.html

***** Supported Protocols and Ciphers

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html

***** Charges for HTTPS Connections

You always incur a surcharge for HTTPS requests.  For more information, see
[[http://aws.amazon.com/cloudfront/pricing][Amazon CloudFront Pricing]].

**** Using Alternate Domain Names and HTTPS

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html

If you want to use your own domain name in the URLs for your files and you want
your viewers to use HTTPS, you must complete the additional steps that are
described in this topic.

***** Choosing How CloudFront Serves HTTPS Requests

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-https-dedicated-ip-or-sni.html

If you want your viewers to use HTTPS and to use alternate domain names for
your files, you need to choose one of the following options for how CloudFront
serves HTTPS requests:

- Use Server Name Indication (SNI) - Recommended<<SNI>> ::

     /Server Name Indication/ (SNI) is an extension to the TLS protocol that is
     supported by browsers and clients released after 2010.  If you configure
     CloudFront to serve HTTPS requests using SNI, CloudFront associates your
     alternate domain name with an IP address for each edge location.  When a
     viewer submits an HTTPS request for your content, DNS routes the request
     to the IP address for the correct edge location.  The IP address to your
     domain name is determined during the SSL/TLS handshake negotiation; the IP
     address isn't dedicated to your distribution.

- Use a dedicated IP address in each edge location ::

***** Requirements for Using SSL/TLS Certificates with CloudFront

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-requirements.html

The requirements for SSL/TLS certificates are described in this topic. They
apply, except as noted, to both of the following:

- Certificates for using HTTPS between viewers and CloudFront

- Certificates for using HTTPS between CloudFront and your origin

****** Certificate Issuer

The certificate issuer you must use depends on whether you want to require
HTTPS between viewers and CloudFront or between CloudFront and your origin:

- HTTPS between viewers and CloudFront ::

     You can use a certificate that was issued by a trusted certificate
     authority (CA) such as Comodo, DigiCert, or Symantec, or you can use a
     certificate provided by AWS Certificate Manager (ACM).

- HTTPS between CloudFront and a custom origin ::

     If the origin is not an ELB load balancer, such as Amazon EC2, the
     certificate must be issued by a trusted CA such as Comodo, DigiCert, or
     Symantec.  If your origin is an ELB load balancer, you can also use a
     certificate provided by ACM.

****** AWS Region that You Request a Certificate In---Certificate Manager

#+cindex:US East (N. Virginia)
If you want to require HTTPS between viewers and CloudFront, you must change
the AWS region to US East (N. Virginia) in the AWS Certificate Manager console
before you request or import a certificate.

If you want to require HTTPS between CloudFront and your origin, and you're
using an ELB load balancer as your origin, you can request or import a
certificate in any region.

****** Certificate Format

#+cindex:X.509 PEM format
#+cindex:certificate format
The certificate must be in X.509 PEM format.  This is the default format if
you're using AWS Certificate Manager.

****** Key Type

#+cindex:RSA public/private key pairs
CloudFront supports only RSA public/private key pairs.

***** Limits on Using SSL/TLS Certificates with CloudFront---HTTPS Between Viewers and CloudFront Only

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-limits.html

***** Configuring Alternate Domain Names and HTTPS

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-procedures.html

To use alternate domain names in the URLs for your files and to use HTTPS
between viewers and CloudFront, perform the applicable procedures.

****** Requesting Permission to Use Three or More SSL/TLS Certificates

****** Getting an SSL/TLS Certificate

Get an SSL/TLS certificate if you don't already have one.

To use a certificate provided by AWS Certificate Manager (ACM), see the [[https://docs.aws.amazon.com/acm/latest/userguide/][AWS
Certificate Manager User Guide]].  We recommend that you use ACM to provision,
manage, and deploy SSL/TLS certificates on AWS managed resources.

****** Importing an SSL/TLS Certificate

To update settings for your distribution, perform the following procedure:

- Update the following values:

  - Alternate Domain Names (CNAMEs)

  - SSL Certificate (Web Distributions Only)

  - Clients Supported (Web Distributions Only)

    - Only Clients that Support Server Name Indication (SNI):


Configure CloudFront to require HTTPS between viewers and CloudFront:

- Viewer Protocol Policy: choose one

  - Redirect HTTP to HTTPS

  - HTTPS Only

****** Updating Your CloudFront Distribution

***** Determining the Size of the Public Key in an SSL/TLS Certificate

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-size-of-public-key.html

***** Increasing the Limit for SSL/TLS Certificates

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/increasing-the-limit-for-ssl-tls-certificates.html

***** Rotating SSL/TLS Certificates

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-rotate-certificates.html

***** Reverting from a Custom SSL/TLS Certificate to the Default CloudFront Certificate

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-revert-to-cf-certificate.html

***** Switching from a Custom SSL/TLS Certificate with Dedicated IP Addresses to SNI

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-switch-dedicated-to-sni.html

**** TODO Serving Private Content with Signed URLs and Signed Cookies

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html

**** TODO Restricting Access to Amazon S3 Content by Using an Origin Access Identity

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html

**** Using AWS WAF to Control Access to Your Content

**** Restricting the Geographic Distribution of Your Content

**** Using Field-Level Encryption to Help Protect Sensitive Data

*** Optimizing Content Caching and Availability

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ConfiguringCaching.html

This section describes how to set up and manage caching of objects to improve
performance and meet your business requirements.

To learn about adding and removing the content that you want CloudFront to
serve, see:
- [[*Adding Removing Replacing Content][Adding, Removing, or Replacing Content That CloudFront Distributes]]

*** Troubleshooting

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Troubleshooting.html

Troubleshoot common problems you might encounter when setting up Amazon
CloudFront to distribute your content or when using Lambda@Edge, and find
possible solutions.

*** Request and Response Behavior

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehavior.html

The following sections explain how CloudFront processes viewer requests and
forwards the requests to your Amazon S3 or custom origin, and how CloudFront
processes responses from your origin, including how CloudFront processes and
caches 4xx and 5xx HTTP status codes.

*** Generating Custom Error Responses

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/GeneratingCustomErrorResponses.html

If the objects that you're serving through CloudFront are unavailable for some
reason, your web server typically returns an HTTP status code to
CloudFront. For example, if a viewer specifies an invalid URL, your web server
returns a 404 status code to CloudFront, and CloudFront returns that status
code to the viewer. The viewer displays a brief and sparsely formatted default
message similar to this:

: Not Found: The requested URL /myfilename.html was not found on this server.

But you can display a custom error message instead, if you like.  You also have
several options for managing how CloudFront responds when there's an error.  To
specify options for custom error messages, you update your CloudFront
distribution to specify those values.

*** On-Demand and Live Streaming Video

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/on-demand-streaming-video.html

You can use CloudFront to deliver on-demand video or live streaming video using
any HTTP origin.  One way you can set up video workflows in the cloud is by
using CloudFront together with AWS Media Services

*** Customizing with Lambda Edge

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-at-the-edge.html

#+cindex:Lambda@@Edge
Lambda@Edge is an extension of AWS Lambda, a compute service that lets you
execute functions that customize the content that CloudFront delivers.  You can
author Node.js or Python functions in one Region, US-East-1 (N. Virginia), and
then execute them in AWS locations globally that are closer to the viewer,
without provisioning or managing servers.  Lambda@Edge scales automatically,
from a few requests per day to thousands per second.  Processing requests at
AWS locations closer to the viewer instead of on origin servers significantly
reduces latency and improves the user experience.

When you associate a CloudFront distribution with a Lambda@Edge function,
CloudFront intercepts requests and responses at CloudFront edge locations.  You
can execute Lambda functions when the following CloudFront events occur:

- When CloudFront receives a request from a viewer (viewer request)
- Before CloudFront forwards a request to the origin (origin request)
- When CloudFront receives a response from the origin (origin response)
- Before CloudFront returns the response to the viewer (viewer response)


There are many uses for Lambda@Edge processing. For example:

- A Lambda function can inspect cookies and rewrite URLs so that users see
  different versions of a site for A/B testing.
- CloudFront can return different objects to viewers based on the device
  they're using by checking the User-Agent header, which includes information
  about the devices. For example, CloudFront can return different images based
  on the screen size of their device. Similarly, the function could consider
  the value of the Referer header and cause CloudFront to return the images to
  bots that have the lowest available resolution.
- Or you could check cookies for other criteria. For example, on a retail
  website that sells clothing, if you use cookies to indicate which color a
  user chose for a jacket, a Lambda function can change the request so that
  CloudFront returns the image of a jacket in the selected color.
- A Lambda function can generate HTTP responses when CloudFront viewer request
  or origin request events occur.
- A function can inspect headers or authorization tokens, and insert a header
  to control access to your content before CloudFront forwards the request to
  your origin.
- A Lambda function can also make network calls to external resources to
  confirm user credentials, or fetch additional content to customize a
  response.

*** Reports Access Logs and Monitoring

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/reports-and-monitoring.html

This section includes topics that provide details on your options for reports
and monitoring for CloudFront.  A variety of reports are available for you to
see usage and activity for your CloudFront distributions, including billing
reports, cache statistics, popular content, and top referrers.  In addition,
you can monitor and track CloudFront—including Lambda@Edge activity—directly in
the CloudFront console, and by using tools such as CloudTrail and CloudWatch.

*** Security

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/security.html

This documentation helps you understand how to apply the shared responsibility
model when using CloudFront.  The following topics show you how to configure
CloudFront to meet your security and compliance objectives.  You also learn how
to use other AWS services that help you to monitor and secure your CloudFront
resources.

*** Quotas

https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html

CloudFront is subject to the following quotas (formerly referred to as limits).
Note that Lambda@Edge has specific quotas as well, that are in addition to the
default CloudFront quotas.

** Cognito Developer Guide

#+cindex:Cognito developer guide
https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html

*** Getting Started with Cognito

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-getting-started.html

This section describes the top Amazon Cognito tasks and where to start.

#+texinfo:@heading User Pools

/User pools/ are user directories that provide sign-up and sign-in options for
your web and mobile app users.

#+texinfo:@heading Identity Pools

/Identity pools/ provide AWS credentials to grant your users access to other
AWS services.  You can use user pools and identity pools separately or
together.

*** Add Sign-up and Sign-in with a User Pool
**** Step 1---Create a User Directory with a User Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-as-user-directory.html

**** Step 2---Add an App to Enable the Hosted Web UI

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-configuring-app-integration.html

**** Adding Social Identity Providers to a User Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-social-idp.html

**** Adding SAML Identity Providers to a User Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-saml-idp.html

**** Adding OIDC Identity Providers to a User Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-oidc-idp.html

**** Integrating Amazon Cognito With Web and Mobile Apps

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-integrate-apps.html

**** Customizing the Built-in Sign-in and Sign-up Webpages

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-app-ui-customization.html

**** Managing Security for Amazon Cognito User Pools

https://docs.aws.amazon.com/cognito/latest/developerguide/managing-security.html

**** Customizing User Pool Workflows with Lambda Triggers

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html

**** Using Amazon Pinpoint Analytics with Amazon Cognito User Pools

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-pinpoint-integration.html

*** Manage Users in a User Pool

**** Signing Up and Confirming User Accounts

https://docs.aws.amazon.com/cognito/latest/developerguide/signing-up-users-in-your-app.html

**** Creating User Accounts as Administrator

https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-create-user-accounts.html

**** Managing and Searching for User Accounts

https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html

**** Adding Groups to a User Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-user-groups.html

**** Importing Users into a User Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-import-users.html

*** Access Resources

**** Authenticate with a User Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-scenarios.html#scenario-basic-user-pool

**** Access Your Server-side Resources with a User Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-scenarios.html#scenario-backend

**** Access Resources with API Gateway and Lambda with a User Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-scenarios.html#scenario-api-gateway

**** Accessing AWS Services Using an Identity Pool After Sign-in

https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-integrating-user-pools-with-identity-pools.html

**** Authenticate with a Third Party and Access AWS Services with an Identity Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-scenarios.html#scenario-identity-pool

**** Access AWS AppSync Resources with Amazon Cognito

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-scenarios.html#scenario-appsync

*** Cognito Tutorials
**** Create a User Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/tutorial-create-user-pool.html

**** Create an Identity Pool

https://docs.aws.amazon.com/cognito/latest/developerguide/tutorial-create-identity-pool.html

**** Cleaning Up Pools

https://docs.aws.amazon.com/cognito/latest/developerguide/tutorial-cleanup-tutorial.html

*** Integrate Cognito with Applications

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-integrate-apps.html

When new users discover your app, or when existing users return to it, their
first tasks are to sign up or sign in.  By integrating Amazon Cognito with your
client code, you connect your app to backend AWS functionality that aids
authentication and authorization workflows.

Your app will use the Amazon Cognito API to, for example:

- create new users in your user pool
- retrieve user pool tokens
- obtain temporary credentials from your identity pool


To integrate Amazon Cognito with your web or mobile app, use the SDKs and
libraries that the AWS Amplify framework provides.

#+texinfo:@heading Amazon Cognito Authentication With the AWS Amplify Framework

#+cindex:Amplify
/AWS Amplify/ provides *services* and *libraries* for web and mobile
developers.  With AWS Amplify, you can build apps that integrate with backend
environments that are composed of AWS services.

#+texinfo:@subheading Amplify Framework

#+cindex:Amplify framework
To provision your backend environment, and to integrate AWS services with your
client code, you use the /AWS Amplify framework/.

- The framework provides an interactive command line interface (CLI) that helps
  you configure AWS resources for features that are organized into categories,
  including analytics, storage, and authentication, among many others.

- The framework also provides high-level SDKs and libraries for web and mobile
  platforms, including iOS, Android, and JavaScript.

- Supported JavaScript frameworks include:

  #+cindex:React
  #+cindex:React Native
  #+cindex:Angular
  #+cindex:Ionic
  #+cindex:Vue
  - React

  - React Native

  - Angular

  - Ionic

  - Vue


#+texinfo:@heading Authentication

#+cindex:authentication
Each of the SDKs and libraries include /authentication/ operations that you can
use to implement the authentication workflows that Amazon Cognito drives.

#+texinfo:@subheading Use the AWS Amplify Framework for Authentication in your App

To use the AWS Amplify framework to add authentication to your app, see the AWS
Amplify documentation for your platform:

**** AWS Amplify authentication for JavaScript

https://aws-amplify.github.io/docs/js/authentication

#+cindex:Amplify Authentication
#+cindex:user authentication
#+cindex:authentication
#+cindex:authentication APIs
AWS Amplify Authentication module provides Authentication APIs and building
blocks for developers who want to create user authentication experiences.

Amplify interfaces with User Pools to store your user information, including
federation with other OpenID providers like Facebook & Google, and it leverages
Federated Identities to manage user access to AWS Resources, for example
allowing a user to upload a file to an S3 bucket.

The Amplify CLI automates the access control policies for these AWS resources
as well as provides fine grained access controls via GraphQL for protecting
data in your APIs.

*** Cognito APIs

**** User Pool API

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-api-reference.html

With Amazon Cognito user pools, you can enable your web and mobile app users to
sign up and sign in.

You can:

- change passwords for authenticated users

- initiate forgotten password flows for unauthenticated users


For a complete user pool API reference see [[https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/][Amazon Cognito User Pools API
Reference]].

**** User Pool Auth API

https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html

#+cindex:authentication server
#+cindex:sign-up
#+cindex:sign-in
Once a domain has been configured for your user pool, Amazon Cognito hosts an
authentication server that allows you to add sign-up and sign-in webpages to
your app.

This section contains the HTTPS contract to the Amazon Cognito authentication
server from a user pool client, including sample requests and responses.  It
describes the expected behavior from the authentication server for positive and
negative conditions.

In addition to the server contract REST API, Amazon Cognito also provides Auth
SDKs for Android, iOS, and JavaScript that make it easier to form requests and
interact with the server.

***** AUTHORIZATION Endpoint

https://docs.aws.amazon.com/cognito/latest/developerguide/authorization-endpoint.html

#+cindex:authorization endpoint
The /oauth2/authorize endpoint signs the user in.

: GET /oauth2/authorize

The ~/oauth2/authorize~ endpoint only supports HTTPS =GET=.  The user pool
client typically makes this request through a browser.  Web browsers include
Chrome or Firefox.  Android browsers include Custom Chrome Tab.  iOS browsers
include Safari View Control.

#+cindex:HTTP protocol
The authorization server requires HTTPS instead of HTTP as the protocol when
accessing the authorization endpoint.

****** Request Parameters

#+attr_texinfo: :indic @samp
- response_type :: Required

                   The response type.  Must be =code= or =token=.  Indicates
                   whether the client wants an authorization code
                   (authorization code grant flow) for the end user or directly
                   issues tokens for end user (implicit flow).

- client_id :: Required

               Must be a pre-registered client in the user pool and must be
               enabled for federation.

- redirect_uri :: Required

                  The URL to which the authentication server redirects the
                  browser after authorization has been granted by the user.  A
                  redirect URI must:

  - Be an absolute URI.
  - Be pre-registered with a client.
  - Not include a fragment component.

  Amazon Cognito requires HTTPS over HTTP except for ~http://localhost~ for
                  testing purposes only.  App callback URLs such as
                  ~myapp://example~ are also supported.

- state :: Optional but recommended

           An opaque value the clients adds to the initial request.  The
           authorization server includes this value when redirecting back to
           the client.  This value must be used by the client to prevent [[*Cross-Site Request Forgery---CSRF][CSRF]]
           attacks.

- identity_provider :: Optional

     Used by the developer to directly authenticate with a specific provider.

  - For social sign-in the valid values are Facebook, Google, and
    LoginWithAmazon.

  - For Amazon Cognito user pools, the value is =COGNITO=.

  - For other identity providers this would be the name you assigned to the IdP
    in your user pool.

- idp_identifier :: Optional

                    Used by the developer to map to a provider name without
                    exposing the provider name.

- scope :: Optional

           Can be a combination of any system-reserved scopes or custom scopes
           associated with a client.  Scopes must be separated by spaces.  Any
           scope used must be preassociated with the client or it will be
           ignored at runtime.  If the client doesn't request any scopes, the
           authentication server uses all scopes associated with the client.

           System reserved scopes are:

  - openid

    An ID token is only returned if openid scope is requested.  The access
    token can be only used against Amazon Cognito User Pools if
    aws.cognito.signin.user.admin scope is requested.  The phone, email, and
    profile scopes can only be requested if openid scope is also requested.
    These scopes dictate the claims that go inside the ID token.

  - email

  - phone

  - profile

  - aws.cognito.signin.user.admin

- code_challenge_method :: Optional

     The method used to generate the challenge.  Amazon Cognito authentication
     server supports only =S256=.

- code_challenge :: Required only when the code_challenge_method is specified.

                    The generated challenge from the code_verifier.

****** Example Requests with Positive Responses

******* Authorization Code Grant
#+cindex:authorization code grant

#+texinfo:@heading Sample Request

#+begin_example
GET https://mydomain.auth.us-east-1.amazoncognito.com/oauth2/authorize?
response_type=code&
client_id=ad398u21ijw3s9w3939&
redirect_uri=https://YOUR_APP/redirect_uri&
state=STATE&
scope=openid+profile+aws.cognito.signin.user.admin
#+end_example

#+texinfo:@heading Sample Response

#+cindex:authentication server
#+cindex:authorization code
#+cindex:state
#+cindex:query string
#+cindex:fragment
The Amazon Cognito authentication server redirects back to your app with the
authorization code and state.  The code and state must be returned in the query
string parameters and not in the fragment.

- A /query string/ :: the part of a web request that appears after a '?'
     character; the string can contain one or more parameters separated by '&'
     characters.

- A /fragment/ :: the part of a web request that appears after a '#' character
                  to specify a subsection of a document.

#+begin_example
HTTP/1.1 302 Found
Location: https://YOUR_APP/redirect_uri?code=AUTHORIZATION_CODE&state=STATE
#+end_example

******* Authorization Code Grant with PKCE
#+cindex:PKCE authorization code grant

#+texinfo:@heading Sample Request

#+begin_example
GET https://mydomain.auth.us-east-1.amazoncognito.com/oauth2/authorize?
response_type=code&
client_id=ad398u21ijw3s9w3939&
redirect_uri=https://YOUR_APP/redirect_uri&
state=STATE&
scope=aws.cognito.signin.user.admin&
code_challenge_method=S256&
code_challenge=CODE_CHALLENGE
#+end_example

#+texinfo:@heading Sample Response

#+begin_example
HTTP/1.1 302 Found
Location: https://YOUR_APP/redirect_uri?code=AUTHORIZATION_CODE&state=STATE
#+end_example

******* Token grant without openid scope
#+cindex:token grant without openid scope

#+texinfo:@heading Sample Request

#+begin_example
GET https://mydomain.auth.us-east-1.amazoncognito.com/oauth2/authorize?
response_type=token&
client_id=ad398u21ijw3s9w3939&
redirect_uri=https://YOUR_APP/redirect_uri&
state=STATE&
scope=aws.cognito.signin.user.admin
#+end_example

#+texinfo:@heading Sample Response

The Amazon Cognito authorization server redirects back to your app with access
token.  Since =openid= scope was not requested, an ID token is not returned.  A
refresh token is never returned in this flow.  Token and state are returned in
the fragment and not in the query string.

#+begin_example
HTTP/1.1 302 Found
Location: https://YOUR_APP/redirect_uri#access_token=ACCESS_TOKEN&token_type=bearer&expires_in=3600&state=STATE
#+end_example

******* Token grant with openid scope
#+cindex:token grant with openid scope

#+texinfo:@heading Sample Request

#+begin_example
GET https://mydomain.auth.us-east-1.amazoncognito.com/oauth2/authorize? 
response_type=token& 
client_id=ad398u21ijw3s9w3939& 
redirect_uri=https://YOUR_APP/redirect_uri& 
state=STATE&
scope=aws.cognito.signin.user.admin+openid+profile
#+end_example

#+texinfo:@heading Sample Reqponse

The authorization server redirects back to your app with access token and ID
token (because =openid= scope was included).

#+begin_example
HTTP/1.1 302 Found
Location: https://YOUR_APP/redirect_ur#id_token=ID_TOKEN&access_token=ACCESS_TOKEN&token_type=bearer&expires_in=3600&state=STATE
#+end_example

****** Examples of Negative Responses

The following are examples of negative responses:

- If client_id and redirect_uri are valid but there are other problems with the
  request parameters (for example, if response_type is not included; if
  code_challenge is supplied but code_challenge_method is not supplied; or if
  code_challenge_method is not 'S256'), the authentication server redirects the
  error to client's redirect_uri.

  : HTTP 1.1 302 Found Location: https://client_redirect_uri?error=invalid_request

- If the client requests 'code' or 'token' in response_type but does not have
  permission for these requests, the Amazon Cognito authorization server should
  return unauthorized_client to client's redirect_uri, as follows:

  : HTTP 1.1 302 Found Location: https://client_redirect_uri?error=unauthorized_client

- If the client requests invalid, unknown, malformed scope, the Amazon Cognito
  authorization server should return invalid_scope to the client's
  redirect_uri, as follows:

  : HTTP 1.1 302 Found Location: https://client_redirect_uri?error=invalid_scope

- If there is any unexpected error in the server, the authentication server
  should return server_error to client's redirect_uri. It should not be the
  HTTP 500 error displayed to the end user in the browser, because this error
  doesn't get sent to the client. The following error should return:

  : HTTP 1.1 302 Found Location: https://client_redirect_uri?error=server_error

- When authenticating by federating to third-party identity providers, Cognito
  may experience connection issues such as the following:

  - If a connection timeout occurs while requesting token from the identity
    provider, the authentication server redirects the error to the client’s
    redirect_uri as follows:

    #+begin_example
    HTTP 1.1 302 Found Location: https://client_redirect_uri?
    error=invalid_request&
    error_description=Timeout+occurred+in+calling+IdP+token+endpoint
    #+end_example

  - If a connection timeout occurs while calling jwks endpoint for id_token
    validation, the authentication server redirects the error to the client’s
    redirect_uri as follows:

    #+begin_example
    HTTP 1.1 302 Found Location: https://client_redirect_uri?
    error=invalid_request&
    error_description=error_description=Timeout+in+calling+jwks+uri
    #+end_example

- When authenticating by federating to third-party identity providers, the
  providers may return error responses due to configuration errors or otherwise
  such as the following:

  - If an error response is received from other providers, the authentication
    server redirects the error to the client’s redirect_uri as follows:

    #+begin_example
    HTTP 1.1 302 Found Location: https://client_redirect_uri?
    error=invalid_request&
    error_description=[IdP name]+Error+-+[status code]+error getting token
    #+end_example

  - If an error response is received from Google, the authentication server
    redirects the error to the client’s redirect_uri as follows:

    #+begin_example
    HTTP 1.1 302 Found Location: https://client_redirect_uri?
    error=invalid_request&
    error_description=Google+Error+-+[status code]+[Google provided error code]
    #+end_example

- In the rare case where Cognito encounters an exception in the communication
  protocol while making any connection to an external identity provider, the
  authentication server redirects the error to the client's redirect_uri with
  either of the following messages:

  : HTTP 1.1 302 Found Location: https://client_redirect_uri?error=invalid_request&error_description=Connection+reset

  : HTTP 1.1 302 Found Location: https://client_redirect_uri?error=invalid_request&error_description=Read+timed+out

***** TOKEN Endpoint

***** USERINFO Endpoint

***** LOGIN Endpoint

https://docs.aws.amazon.com/cognito/latest/developerguide/login-endpoint.html

#+cindex:login endpoint
#+cindex:login webpage
The ~/login~ endpoint signs the user in.  It loads the login page and presents
the authentication options configured for the client to the user.

#+texinfo:@heading GET /login

The ~/login~ endpoint only supports HTTPS GET.  The user pool client makes this
request through a system browser.  System browsers for JavaScript include
Chrome or Firefox. Android browsers include Custom Chrome Tab. iOS browsers
include Safari View Control.

****** Request Parameters

#+attr_texinfo: :indic @samp
- client_id :: Required.  The app client ID for your app. To obtain an app
               client ID, register the app in the user pool.

- redirect_uri :: Required.  The URI where the user is redirected after a
                  successful authentication.  It should be configured on
                  =response_type= of the specified =client_id=.

- response_type :: Required.  The OAuth response type, which can be code for
                   code grant flow and token for implicit flow.

- state :: Optional but recommended.  Can be a combination of any
           system-reserved scopes or custom scopes associated with a client.
           Scopes must be separated by spaces.  If the client doesn't request
           any scopes, the authentication server uses all scopes associated
           with the client.

           System reserved scopes are: 
  - openid,

    An ID token is only returned if an =openid= scope is requested.  The access
    token can only be used against Amazon Cognito user pools if an
    =aws.cognito.signin.user.admin= scope is requested.  The =phone=, =email=,
    and =profile= scopes can only be requested if an =openid= scope is also
    requested.  These scopes dictate the claims that go inside the ID token.

  - email,

  - phone,

  - profile, and

  - aws.cognito.signin.user.admin.  

  Any scope used must be preassociated with the client or it is ignored at
           runtime.


#+texinfo:@heading Sample Request

#+cindex:login screen
This example displays the login screen.

#+begin_example
GET https://mydomain.auth.us-east-1.amazoncognito.com/login?
response_type=code&
client_id=ad398u21ijw3s9w3939&
redirect_uri=https://YOUR_APP/redirect_uri&
state=STATE&
scope=openid+profile+aws.cognito.signin.user.admin
#+end_example

***** LOGOUT Endpoint

**** Identity Pool API

**** Sync API

** Login with Amazon

“Securely connect with millions of Amazon customers and personalize their
experience”

https://developer.amazon.com/apps-and-games/login-with-amazon

Let customers log in to your site or app in just a few clicks using their
Amazon accounts.  Leverage a brand customers trust while getting data like
name, email address, and zip code to build a more personalized experience.

[[https://developer.amazon.com/docs/login-with-amazon/web-docs.html][Getting Started]]

#+texinfo:@heading Benefits

#+texinfo:@subheading Reduce registration friction
Customers prefer to register and log in with credentials they already know. In
a head-to-head test, Woot found that customers picked Login with Amazon twice
as many times as any other identity provider.

#+texinfo:@subheading Leverage security and scalability
Keep your customer information more secure by leveraging the same user
authentication system used by Amazon.com. Login with Amazon is based on OAuth
2.0, which has been broadly adopted for user-authorized exchanges across sites.

#+texinfo:@subheading Reduce infrastructure and operational cost
By taking advantage of Login with Amazon, you can spend less time building a
user management system and more time building your product. Login with Amazon
also allows for faster development cycle by using the OAuth 2.0 protocol.

#+texinfo:@subheading Make Amazon's customers your customers
When you add Amazon Pay, millions of Amazon buyers can log in and pay on your
website or mobile devices with the information already stored in their Amazon
account.

#+texinfo:@heading Blog Posts

#+texinfo:@subheading Query strings and URL fragments in Login with Amazon responses
When using an implicit grant, the Login with Amazon SDK for JavaScript can
return the access token as a URL fragment, rather than a query string.  Why
does this happen? How is the access token utilized? [[https://developer.amazon.com/blogs/post/Tx2XUFUBNT8PRXE/query-strings-and-url-fragments-in-login-with-amazon-responses][Go]]

* Getting Started Resource Center

“Learn AWS fundamentals, connect with the AWS developer community, and advance
your knowledge with certifications.”

https://aws.amazon.com/getting-started/

** Build Your First Web Application

A great introduction to AWS, this tutorial teaches you how to deploy a static
website, run a web server, set up a database, authenticate users, and analyze a
clickstream.  It consists of 5 separate but related modules which can be
completed individually.

- [[https://aws.amazon.com/getting-started/projects/build-modern-app-fargate-lambda-dynamodb-python/?e=gs&p=gsrc][Build]]

** Tutorials

These short tutorials are designed to teach you more about AWS services and
quickly give you hands-on experience.

- Mobile :: [[https://aws.amazon.com/getting-started/tutorials/deploy-react-app-cicd-amplify/?e=gs&p=gsrc&trk=gs_card][Deploy and Host a ReactJS App]]

- Machine Learning :: [[https://aws.amazon.com/getting-started/tutorials/build-train-deploy-machine-learning-model-sagemaker/?trk=gs_card&e=gs&p=gsrc][Build, Train, and Deploy a Machine Learning Model]]

- Compute :: [[https://aws.amazon.com/getting-started/tutorials/launch-a-virtual-machine/?trk=gs_card&e=gs&p=gsrc][Launch a Linux Virtual Machine]]

- Serverless :: [[https://aws.amazon.com/getting-started/tutorials/run-serverless-code/?trk=gs_card&e=gs&p=gsrc][Run a Serverless "Hello, World!"]]

- Storage :: [[https://aws.amazon.com/getting-started/tutorials/backup-files-to-amazon-s3/?trk=gs_card&e=gs&p=gsrc][Store and Retrieve a File]]

- Databases :: [[https://aws.amazon.com/getting-started/tutorials/create-nosql-table/?trk=gs_card&e=gs&p=gsrc][Create and Query a NoSQL Table]]


[[https://aws.amazon.com/getting-started/use-cases/][VIEW ALL TUTORIALS]]

** Additional resources

Ready to learn more?  Connect with the AWS developer community, advance your
knowledge with online and in-person trainings, showcase your expertise with
certifications, and explore reference materials to help you build on AWS.

*** Connect with developer communities

*** Grow your skill set

*** Get trained and certified

*** Explore reference materials

**** SDKs and Toolkits

https://aws.amazon.com/tools/

**** Documentation

https://docs.aws.amazon.com/

**** Quick Starts

https://aws.amazon.com/quickstart/

**** Whitepapers

https://aws.amazon.com/whitepapers/

**** FAQs

https://aws.amazon.com/faqs/

**** AWS Glossary

https://docs.aws.amazon.com/general/latest/gr/glos-chap.html/

** Command Line Interface---Getting Started

https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html

[[https://github.com/aws/aws-cli][aws-cli GitHub Repository]]

#+cindex:Command Line Interface (CLI)
#+cindex:CLI (Command Line Interface)
The AWS Command Line Interface (AWS CLI) is an open source tool that enables
you to interact with AWS services using commands in your command-line shell.

The AWS CLI is available in two versions:

- Version 1.x :: The generally available version of the AWS CLI that is
                 suitable for use in production environments.

- Version 2.x :: A preview version of the AWS CLI that is intended for testing
                 and evaluation.


With minimal configuration, the AWS CLI enables you to start running commands
that implement functionality equivalent to that provided by the browser-based
AWS Management Console from the command prompt in your favorite terminal
program:

#+cindex:@code{bash}
#+cindex:@code{zsh}
#+cindex:@code{tcsh}
#+cindex:@code{SSH}
#+attr_texinfo: :indic @b
- Linux shells :: Use common shell programs such as ~bash~, ~zsh~, and ~tcsh~
                  to run commands in Linux or macOS.

- Remotely :: Run commands on Amazon Elastic Compute Cloud (Amazon EC2)
              instances through a remote terminal program such as PuTTY or SSH,
              or with AWS Systems Manager.


#+cindex:IaaS
All IaaS (infrastructure as a service) AWS administration, management, and
access functions in the AWS Management Console are available in the AWS API and
CLI.

The AWS CLI provides direct access to the public APIs of AWS services.  You can
explore a service's capabilities with the AWS CLI, and develop shell scripts to
manage your resources.  Or, you can take what you learn to develop programs in
other languages by using the AWS SDKs.

In addition to the low-level, API-equivalent commands, several AWS services
provide customizations for the AWS CLI.  Customizations can include
higher-level commands that simplify using a service with a complex API.  For
example, the [[s3 API][aws s3 commands]] provide a familiar syntax for managing files in
Amazon Simple Storage Service (Amazon S3).  Performing the same task with the
low-level commands (available under [[s3api][aws s3api]]) would take a lot more effort.

*** Installing the CLI

https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html

**** CLI Version 2

AWS CLI version 2 is provided as a preview for testing and evaluation.  At this
time, we do not recommend using it in a production environment.  For production
environments, we recommend that you use the generally available version 1.x.

AWS CLI version 2 is the most recent major version of the AWS CLI and supports
all of the latest features.  Some features introduced in version 2 are not
backward compatible with version 1 and you must upgrade to access those
features.

AWS CLI version 2 is available to install only as a bundled installer.
Although you might find it in some package managers, these are not produced or
managed by AWS and are therefore not official and not supported by AWS.  We
recommend that you install the AWS CLI from only the official AWS distribution
points, as documented in this guide.

- see [[https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html][Installing the AWS CLI version 2]].


For AWS CLI version 2, it doesn't matter if you have Python installed and if
you do, it doesn't matter which version.  AWS CLI version 2 uses only the
version of Python (and all other dependencies) that are included and installed
into a local virtual environment that is isolated.

***** Prerequisites

- The AWS CLI version 2 has no dependencies on other software packages.  It has
  a self-contained copy of all dependencies included with the installer.  You
  no longer need to have Python installed first.

- You must be able to "unzip" the downloaded package.  If your operating system
  doesn't have a built-in unzip command, use your favorite package manager to
  download it or an equivalent.

- *Linux*: We support the AWS CLI version 2 on recent distributions of CentOS,
  Fedora, Ubuntu, Amazon Linux 1, and Amazon Linux 2.

- *macOS*: We support the AWS CLI version 2 on versions of macOS that are
  supported by Apple, including High Sierra (10.13), Mojave (10.14), and
  Catalina (10.15).

***** Installing

Follow these steps from the command line to install the AWS CLI on either Linux
or macOS.  The only difference in the following commands is the name of the
file that you download.  Everything else is the same.

#+texinfo:@heading Commands for macOS

#+begin_example
curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-macos.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
aws2 --version
#+end_example

: aws-cli/2.0.0dev2 Python/3.7.4 Darwin/18.7.0 botocore/2.0.0dev1

***** Upgrading

To upgrade your copy of the AWS CLI version 2, run the same steps that you used
to install it, but this time include the @@texinfo:@option{--update}@@ or
@@texinfo:@option{-u}2@ option on the install command line.  If the installer
finds an existing version of the AWS CLI version 2 in the target installation
folder and the @@texinfo:@option{--upgrade}@@ option isn't used, the install
fails.

: sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

***** Uninstalling

To uninstall the AWS CLI version 2, run the following commands, substituting
the paths you used to install.

Now delete the two symlinks in the @@texinfo:@option{--bin-dir}@@ folder.  If
your user account has write permission to these folders, you don't need to use
~sudo~.

#+begin_example
sudo rm /usr/local/bin/aws2
sudo rm /usr/local/bin/aws2_completer
#+end_example

Finally, you can delete the @@texinfo:@option{--install-dir}@@ folder.  Again,
if your user account has write permission to this folder, you don't need to use
~sudo~.

: $ sudo rm -rf /usr/local/aws-cli

**** CLI Version 1

AWS CLI version 1 is the original AWS CLI, and we continue to support it.
However, major new features that are introduced in AWS CLI version 2 might not
be backported to AWS CLI version 1.  To use those features, you must install
AWS CLI version 2.

- see [[https://docs.aws.amazon.com/cli/latest/userguide/install-cliv1.html][Installing the AWS CLI version 1]].


You can install the AWS CLI version 1 using any of the following techniques:

- Using a bundled installer

- Using pip

- Using a virtual environment

***** Prerequisites

- Python 2 version 2.7+ or Python 3 version 3.4+

- Windows, Linux or macOS


You can find the version number of the most recent CLI at:

- https://github.com/aws/aws-cli/blob/master/CHANGELOG.rst


In this guide, the commands shown assume you have Python v3 installed and the
pip commands shown use the pip3 version.

***** Installing the AWS CLI Using the Bundled Installer

For offline or automated installations on Linux or macOS, we recommend that you
try the bundled installer.  The bundled installer includes the AWS CLI, its
dependencies, and a shell script that performs the installation for you.

- [[https://docs.aws.amazon.com/cli/latest/userguide/install-bundle.html][bundled installer]]

***** Installing the AWS CLI Using pip

The pip package manager for Python provides an easy way to install, upgrade,
and remove Python packages and their dependencies.

#+texinfo:@heading Installing the current AWS CLI Version

The AWS CLI is updated frequently with support for new services and commands.
To determine whether you have the latest version:

- see the [[https://github.com/aws/aws-cli/releases][releases page on GitHub]]


If you already have pip and a supported version of Python, you can install the
AWS CLI by using the following command.  If you have Python version 3
installed, we recommend that you use the ~pip3~ command.

: $ pip3 install awscli --upgrade --user

The #+texinfo:@upgrade{--upgrade}@@ option tells ~pip3~ to upgrade any
requirements that are already installed.  The @@texinfo:@option{--user} option
tells ~pip3~ to install the program to a subdirectory of your user directory to
avoid modifying libraries used by your operating system.

#+texinfo:@heading Upgrading to the latest version of the AWS CLI

We recommend that you regularly check to see if there is a new version of the
AWS CLI and upgrade to it when you can.

Use the ~pip3 list -o~ command to check which packages are "outdated".

#+begin_example
$ aws --version
aws-cli/1.16.273 Python/3.7.3 Linux/4.14.133-113.105.amzn2.x86_64 botocore/1.13.0

$ pip3 list -o
Package    Version  Latest   Type 
---------- -------- -------- -----
awscli     1.16.170 1.16.198 wheel
botocore   1.12.160 1.12.188 wheel
#+end_example

Because the previous command shows that there is a newer version of the AWS CLI
available, you can run ~pip3 install --upgrade~ to get the latest version.

: $ pip3 install --upgrade --user awscli

#+texinfo:@heading Installing the AWS CLI in a Virtual Environment

If you encounter issues when you attempt to install the AWS CLI with ~pip3~,
you can [[https://docs.aws.amazon.com/cli/latest/userguide/install-virtualenv.html][install the AWS CLI in a virtual environment]] to isolate the tool and
its dependencies.  Or you can use a different version of Python than you
normally do.

***** Steps to Take after Installation

#+texinfo:@heading Setting the Path to Include the AWS CLI

After you install the AWS CLI, you might need to add the path to the executable
file to your PATH variable.  For platform-specific instructions, see the
following topics:

- macOS :: [[https://docs.aws.amazon.com/cli/latest/userguide/install-macos.html#awscli-install-osx-path][Add the AWS CLI version 1 Executable to Your macOS Command Line Path]]


Verify that the AWS CLI installed correctly by running
: $ aws --version

#+texinfo:@heading Configure the AWS CLI with Your Credentials

Before you can run a CLI command, you must configure the AWS CLI with your
credentials.

You store credential information locally by defining profiles in the [[https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html][AWS CLI
configuration files]], which are stored by default in your user's home directory.

- see [[https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html][Configuring the AWS CLI]].


#+texinfo:@heading Upgrading to the Latest Version of the AWS CLI

The AWS CLI is updated regularly to add support for new services and commands.
To update to the latest version of the AWS CLI, run the installation command
again.  For details about the latest version of the AWS CLI:

- see [[https://github.com/aws/aws-cli/blob/develop/CHANGELOG.rst][the AWS CLI release notes]]

: $ pip3 install awscli --upgrade --user

#+texinfo:@heading Uninstalling the AWS CLI

If you need to uninstall the AWS CLI, use pip uninstall.

: $ pip3 uninstall awscli

**** TODO Install the AWS CLI version 1 on macOS

https://docs.aws.amazon.com/cli/latest/userguide/install-macos.html

The recommended way to install version 1 of the AWS Command Line Interface (AWS
CLI) on macOS is to use the bundled installer.  The bundled installer includes
all dependencies and you can use it offline.

*** Configuring the CLI

https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html

This section explains how to configure the settings that the AWS Command Line
Interface (AWS CLI) uses to interact with AWS.  These include:
- your security credentials,
- the default output format, and
- the default AWS Region.


AWS requires that all incoming requests are cryptographically signed.  The AWS
CLI does this for you.  The "signature" includes a date/time stamp.  Therefore,
you must ensure that your computer's date and time are set correctly.  If you
don't, and the date/time in the signature is too far off of the date/time
recognized by the AWS service, AWS rejects the request.

**** Quickly Configuring the AWS CLI

For general use, the ~aws configure~ command is the fastest way to set up your
AWS CLI installation.  The following example shows sample values.  Replace them
with your own values as described in the following sections.

#+begin_example
$ aws configure
AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE
AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
Default region name [None]: us-west-2
Default output format [None]: json
#+end_example

When you enter this command, the AWS CLI prompts you for four pieces of
information:

- access key,
- secret access key,
- AWS Region, and
- output format.


The AWS CLI stores this information in a /profile/ (a collection of settings)
named =default=.  The information in the =default= profile is used any time you
run an AWS CLI command that doesn't explicitly specify a profile to use.

#+texinfo:@heading Access Key and Secret Access Key

The AWS Access Key ID and AWS Secret Access Key are your AWS credentials.  They
are associated with an AWS Identity and Access Management (IAM) user or role
that determines what permissions you have.  Access keys consist of an access
key ID and secret access key, which are used to sign programmatic requests that
you make to AWS.

#+texinfo:@heading Region

The Default region name identifies the AWS Region whose servers you want to
send your requests to by default.  This is typically the Region closest to you,
but it can be any Region.

#+texinfo:@subheading List of Available Regions

You must specify an AWS Region when using the AWS CLI, either explicitly or by
setting a default Region.  For a list of the available Regions:

#+cindex:Regions and Endpoints
- see [[https://docs.aws.amazon.com/general/latest/gr/rande.html][Regions and Endpoints]].


#+texinfo:@heading Output Format

The =Default output format= specifies how the results are formatted.  The value
can be any of the values in the following list.  If you don't specify an output
format, =json= is used as the default.

- json ::
- yaml ::
- text :: The output is formatted as multiple lines of tab-separated string
          values. This can be useful to pass the output to a text processor,
          like grep, sed, or awk.
- table :: The output is formatted as a table using the characters =+|-= to
           form the cell borders.  It typically presents the information in a
           "human-friendly" format that is much easier to read than the others,
           but not as programmatically useful.

**** Creating Multiple Profiles

If you use the command shown in the previous section, the result is a single
profile named =default=.  You can create additional configurations that you can
refer to with a name by specifying the @@texinfo:@option{--profile}@@ option
and assigning a name.

: $ aws configure --profile produser

Then, when you run a command, you can omit the @@texinfo:@option{--profile}
option and use the credentials and settings stored in the =default= profile.

: $ aws s3 ls

Or you can specify a @@texinfo:@option{--profile profilename}@@ and use the
credentials and settings stored under that name.

: $ aws s3 ls --profile produser

To update any of your settings, simply run ~aws configure~ again (with or
without the @@texinfo:@option{--profile} parameter, depending on which profile
you want to update) and enter new values as appropriate.  The next sections
contain more information about the files that aws configure creates, additional
settings, and named profiles.

**** Configuration Settings and Precedence

#+cindex:credential provider
The AWS CLI uses a set of /credential providers/ to look for AWS credentials.
Each credential provider looks for credentials in a different place, such as
the system or user environment variables, local AWS configuration files, or
explicitly declared on the command line as a parameter.  The AWS CLI looks for
credentials and configuration settings by invoking the providers in the
following order, stopping when it finds a set of credentials to use:

1. Command line options --- You can specify @@texinfo:@option{--region}@@,
   @@texinfo:@option{--output}@@, and @@texinfo:@option{--profile}@@ as
   parameters on the command line.

2. Environment variables --- You can store values in the environment variables:
   =AWS_ACCESS_KEY_ID=, =AWS_SECRET_ACCESS_KEY=, and =AWS_SESSION_TOKEN=.  If
   they are present, they are used.

3. CLI credentials file --- This is one of the files that is updated when you
   run the command ~aws configure~.  The file is located at ~/.aws/credentials
   on Linux or macOS.  This file can contain the /credential details/ for the
   =default= profile and any named profiles.

4. CLI configuration file --- This is another file that is updated when you run
   the command ~aws configure~.  The file is located at ~/.aws/config on Linux
   or macOS. This file contains the /configuration settings/ for the =default=
   profile and any named profiles.

5. Container credentials --- You can associate an IAM role with each of your
   Amazon Elastic Container Service (Amazon ECS) task definitions.  Temporary
   credentials for that role are then available to that task's containers.

6. Instance profile credentials --- You can associate an IAM role with each of
   your Amazon Elastic Compute Cloud (Amazon EC2) instances.  Temporary
   credentials for that role are then available to code running in the
   instance.  The credentials are delivered through the Amazon EC2 metadata
   service.

*** Using an IAM Role in the AWS CLI

https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html

#+cindex:role
An AWS Identity and Access Management (IAM) /role/ is an authorization tool
that lets an IAM user gain additional (or different) permissions, or get
permissions to perform actions in a different AWS account.

You can configure the AWS Command Line Interface (AWS CLI) to use an IAM role
by defining a profile for the role in the ~/.aws/credentials file.

The following example shows a role profile named marketingadmin.  If you run
commands with @@texinfo:@option{--profile marketingadmin}@@ (or specify it with
the =AWS_PROFILE= environment variable), the CLI uses the credentials defined
in the profile =user1= to assume the role with the Amazon Resource Name (ARN)
=arn:aws:iam::123456789012:role/marketingadminrole=.  You can run any
operations that are allowed by the permissions assigned to that role.

#+begin_example
[marketingadmin]
role_arn = arn:aws:iam::123456789012:role/marketingadminrole
source_profile = user1
#+end_example

You can then specify a =source_profile= that points to a separate named profile
that contains IAM user credentials with permission to use the role.  In the
previous example, the =marketingadmin= profile uses the credentials in the
=user1= profile.  When you specify that an AWS CLI command is to use the
profile =marketingadmin=, the CLI automatically looks up the credentials for
the linked =user1= profile and uses them to request temporary credentials for
the specified IAM role.  The CLI uses the =sts:AssumeRole= operation in the
background to accomplish this.  Those temporary credentials are then used to
run the requested CLI command.  The specified role must have attached IAM
permission policies that allow the requested CLI command to run.

To run a CLI command from within an Amazon Elastic Compute Cloud (Amazon EC2)
instance or an Amazon Elastic Container Service (Amazon ECS) container, you can
use an IAM role attached to the instance profile or the container.  If you
specify no profile or set no environment variables, that role is used directly.
This enables you to avoid storing long-lived access keys on your instances.
You can also use those instance or container roles only to get credentials for
another role.  To do this, you use =credential_source= (instead of
=source_profile=) to specify how to find the credentials.  The
=credential_source= attribute supports the following values:

#+attr_texinfo: :indic @code
- Environment :: Retrieves the source credentials from environment variables.

- Ec2InstanceMetadata :: Uses the IAM role attached to the Amazon EC2 instance
     profile.

- EcsContainer :: Uses the IAM role attached to the Amazon ECS container.


The following example shows the same =marketingadminrole= role used by
referencing an Amazon EC2 instance profile.

#+begin_example
[profile marketingadmin]
role_arn = arn:aws:iam::123456789012:role/marketingadminrole
credential_source = Ec2InstanceMetadata
#+end_example

When you invoke a role, you have additional options that you can require, such
as the use of multi-factor authentication and an External ID (used by
third-party companies to access their clients' resources).  You can also
specify unique role session names that can be more easily audited in AWS
CloudTrail logs.

**** Configuring and Using a Role

When you run commands using a profile that specifies an IAM role, the AWS CLI
uses the source profile's credentials to call AWS Security Token Service (AWS
STS) and request temporary credentials for the specified role.  The user in the
source profile must have permission to call =sts:assume-role= for the role in
the specified profile.  The role must have a trust relationship that allows the
user in the source profile to use the role.  The process of retrieving and then
using temporary credentials for a role is often referred to as assuming the
role.

You can create a role in IAM with the permissions that you want users to assume
by following the procedure under Creating a Role to Delegate Permissions to an
IAM User in the AWS Identity and Access Management User Guide.  If the role and
the source profile's IAM user are in the same account, you can enter your own
account ID when configuring the role's trust relationship.

After creating the role, modify the trust relationship to allow the IAM user
(or the users in the AWS account) to assume it.

The following example shows a trust policy that you could attach to a role.
This policy allows the role to be assumed by any IAM user in the account
123456789012, if the administrator of that account explicitly grants the
=sts:assumerole= permission to the user.

#+begin_example
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::123456789012:root"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
#+end_example

The trust policy doesn't actually grant permissions.  The administrator of the
account must delegate the permission to assume the role to individual users by
attaching a policy with the appropriate permissions.  The following example
shows a policy that you can attach to an IAM user that allows the user to
assume only the marketingadminrole role.  For more information about granting a
user access to assume a role, see Granting a User Permission to Switch Roles in
the IAM User Guide.

#+begin_example
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Resource": "arn:aws:iam::123456789012:role/marketingadminrole"
    }
  ]
}
#+end_example

The IAM user doesn't need to have additional permissions to run the CLI
commands using the role profile.  Instead, the permissions to run the command
come from those attached to the role.  You attach permission policies to the
role to specify which actions can be performed against which AWS resources.
For more information about attaching permissions to a role (which works
identically to an IAM user), see [[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_change-permissions.html][Changing Permissions for an IAM User]] in the
IAM User Guide.

Now that you have the role profile, role permissions, role trust relationship,
and user permissions correctly configured, you can use the role at the command
line by invoking the @@texinfo:@option{--profile}@@ option.  For example, the
following calls the Amazon S3 ~ls~ command using the permissions attached to
the =marketingadmin= role as defined by the example at the beginning of this
topic.

: $ aws s3 ls --profile marketingadmin

To use the role for several calls, you can set the =AWS_DEFAULT_PROFILE=
environment variable for the current session from the command line.  While that
environment variable is defined, you don't have to specify the
@@texinfo:@option{--profile}@@ option on each command.

: $ export AWS_PROFILE=marketingadmin

**** Using Multi-Factor Authentication

For additional security, you can require that users provide a one-time key
generated from a multi-factor authentication (MFA) device, a U2F device, or
mobile app when they attempt to make a call using the role profile.

First, you can choose to modify the trust relationship on the IAM role to
require MFA.  This prevents anyone from using the role without first
authenticating by using MFA.  For an example, see the Condition line in the
following example.  This policy allows the IAM user named =anika= to assume the
role the policy is attached to, but only if they authenticate by using MFA.

#+begin_example
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": { "AWS": "arn:aws:iam::123456789012:user/anika" },
      "Action": "sts:AssumeRole",
      "Condition": { "Bool": { "aws:multifactorAuthPresent": true } }
    }
  ]
}
#+end_example

Next, add a line to the role profile that specifies the ARN of the user's MFA
device.  The following sample config file entries show two role profiles that
both use the access keys for the IAM user anika to request temporary
credentials for the role cli-role.  The user =anika= has permissions to assume
the role, granted by the role's trust policy.

#+begin_example
[profile role-without-mfa]
region = us-west-2
role_arn= arn:aws:iam::128716708097:role/cli-role
source_profile=cli-user

[profile role-with-mfa]
region = us-west-2
role_arn= arn:aws:iam::128716708097:role/cli-role
source_profile = cli-user
mfa_serial = arn:aws:iam::128716708097:mfa/cli-user

[profile anika]
region = us-west-2
output = json
#+end_example

The =mfa_serial= setting can take an ARN, as shown, or the serial number of a
hardware MFA token.

The first profile, =role-without-mfa=, doesn't require MFA.  However, because
the previous example trust policy attached to the role requires MFA, any
attempt to run a command with this profile fails.

#+begin_example
$ aws iam list-users --profile role-without-mfa

An error occurred (AccessDenied) when calling the AssumeRole operation: Access denied
#+end_example

The second profile entry, =role-with-mfa=, identifies an MFA device to use.
When the user attempts to run a CLI command with this profile, the CLI prompts
the user to enter the one-time password (OTP) that the MFA device provides.  If
the MFA authentication succeeds, the command performs the requested operation.
The OTP is not displayed on the screen.

#+begin_example
$ aws iam list-users --profile role-with-mfa
Enter MFA code for arn:aws:iam::123456789012:mfa/cli-user:
{
    "Users": [
        {
            ...
#+end_example

*** Using the CLI

https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-using.html

**** Getting Help with the AWS CLI

You can get help with any command when using the AWS Command Line Interface
(AWS CLI).  To do so, simply type ~help~ at the end of a command name.

For example, the following command displays help for the general AWS CLI
options and the available top-level commands.

: $ aws help

The following command displays the available Amazon Elastic Compute Cloud
(Amazon EC2) specific commands.

: $ aws ec2 help

The following example displays detailed help for the Amazon EC2
=DescribeInstances= operation.  The help includes descriptions of its input
parameters, available filters, and what is included as output.  It also
includes examples showing how to type common variations of the command.

: $ aws ec2 describe-instances help

** Getting Started in Node.js SDK

https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/getting-started-nodejs.html

This Node.js code example shows:

- How to create the package.json manifest for your project.

- How to install and include the modules that your project uses.

- How to create an Amazon Simple Storage Service (Amazon S3) service object
  from the AWS.S3 client class.

- How to create an Amazon S3 bucket and upload an object to that bucket.


#+texinfo:@heading The Scenario

The example shows how to set up and run a simple Node.js module that creates an
Amazon S3 bucket, then adds a text object to it.

Because bucket names in Amazon S3 must be globally unique, this example
includes a third-party Node.js module that generates a unique ID value that you
can incorporate into the bucket name.  This additional module is named ~uuid~.

#+texinfo:@heading Prerequisite Tasks

To set up and run this example, you must first complete these tasks:

- Create a working directory for developing your Node.js module.  Name this
  directory ~awsnodesample~.  Note that the directory must be created in a
  location that can be updated by applications.  For example, in Windows, do
  not create the directory under "C:\Program Files".

- Install Node.js.  For more information, see the Node.js website.  You can
  find downloads of the current and LTS versions of Node.js for a variety of
  operating systems at https://nodejs.org/en/download/current/.

*** Step 1---Configure Your Credentials

#+cindex:credentials
#+cindex:shared credentials file
You need to provide credentials to AWS so that only your account and its
resources are accessed by the SDK.  To hold this information, we recommend you
create a shared credentials file.
- see [[shared-credentials-file][Loading Credentials in Node.js from the Shared Credentials File]]


Your credentials file should resemble the following example.

#+begin_example
[default]
aws_access_key_id = YOUR_ACCESS_KEY_ID
aws_secret_access_key = YOUR_SECRET_ACCESS_KEY
#+end_example

You can determine whether you have set your credentials correctly by executing
the following code with node:

#+begin_src js :eval never-export :results output
var AWS = require("aws-sdk");

AWS.config.getCredentials(function(err) {
  if (err) console.log(err.stack);
  // credentials not loaded
  else {
    console.log("Access key:", AWS.config.credentials.accessKeyId);
    console.log("Secret access key:", AWS.config.credentials.secretAccessKey);
  }
});
#+end_src

#+cindex:@env{AWS_SDK_LOAD_CONFIG} environment variable
Similarly, if you have set your region correctly in your config file, you can
display that value by setting the =AWS_SDK_LOAD_CONFIG= environment variable to
a truthy value and using the following code:

: export AWS_SDK_LOAD_CONFIG=1

#+begin_src js :eval never-export :results output
var AWS = require("aws-sdk");

console.log("Region: ", AWS.config.region);
#+end_src

*** Step 2---Create the Package JSON for the Project

#+cindex:package.json
After you create the ~awsnodesample~ project directory, you create and add a
~package.json~ file for holding the metadata for your Node.js project.

In the project directory, create a new file named ~package.json~.  Then add
this JSON to the file.

#+begin_src js :eval no
{
  "dependencies": {},
  "name": "aws-nodejs-sample",
  "description": "A simple Node.js application illustrating usage of the AWS SDK for Node.js.",
  "version": "1.0.1",
  "main": "sample.js",
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "NAME",
  "license": "ISC"
}
#+end_src

*** Step 3---Install the SDK and Dependencies

You install the SDK for JavaScript package using npm.  From the awsnodesample
directory in the package, type the following at the command line.

: npm install aws-sdk

This command installs the SDK for JavaScript in your project, and updates
~package.json~ to list the SDK as a project dependency.

Next, install the ~uuid~ module to the project by typing the following at the
command line, which installs the module and updates ~package.json~.  For more
information about uuid, see the module's page at
https://www.npmjs.com/package/uuid [fn:2]

*** Step 4---Write the Node.js Code

Create a new file named ~sample.js~ to contain the example code.  Begin by
adding the require function calls to include the SDK for JavaScript and ~uuid~
modules so that they are available for you to use.

Build a unique bucket name that is used to create an Amazon S3 bucket by
appending a unique ID value to a recognizable prefix, in this case
'node-sdk-sample-'.  You generate the unique ID by calling the ~uuid~ module.
Then create a name for the Key parameter used to upload an object to the
bucket.

Create a promise object to call the ~createBucket~ method of the AWS.S3 service
object.  On a successful response, create the parameters needed to upload text
to the newly created bucket.  Using another promise, call the ~putObject~
method to upload the text object to the bucket.

#+begin_src js :eval no
// Load the SDK and UUID
var AWS = require('aws-sdk');
var uuid = require('uuid');

// Create unique bucket name
var bucketName = 'node-sdk-sample-' + uuid.v4();
// Create name for uploaded object key
var keyName = 'hello_world.txt';

// Create a promise on S3 service object
var bucketPromise = new AWS.S3({apiVersion: '2006-03-01'}).createBucket({Bucket: bucketName}).promise();

// Handle promise fulfilled/rejected states
bucketPromise.then(
  function(data) {
    // Create params for putObject call
    var objectParams = {Bucket: bucketName, Key: keyName, Body: 'Hello World!'};
    // Create object upload promise
    var uploadPromise = new AWS.S3({apiVersion: '2006-03-01'}).putObject(objectParams).promise();
    uploadPromise.then(
      function(data) {
        console.log("Successfully uploaded data to " + bucketName + "/" + keyName);
      });
}).catch(
  function(err) {
    console.error(err, err.stack);
});
#+end_src

This sample code can be found [[https://github.com/awsdocs/aws-doc-sdk-examples/blob/master/javascript/example_code/nodegetstarted/sample.js][here on GitHub]].

*** Step 5---Run the Sample

Type the following command to run the sample.

: node sample.js

If the upload is successful, you'll see a confirmation message at the command
line.  You can also find the bucket and the uploaded text object in the Amazon
S3 console.

** Configuring the SDK for JavaScript
*** Setting Credentials in Node.js
#+cindex:credentials in Node.js
* AWS Tools

“Tools for developing and managing applications on AWS”

https://aws.amazon.com/tools/

** Programming Languages

#+cindex:C++
#+cindex:Go
#+cindex:Java
#+cindex:JavaScript
#+cindex:.NET
#+cindex:Node.js
#+cindex:PHP
#+cindex:Python
#+cindex:Ruby
Easily develop applications on AWS in the programming language of your choice.

- C++
- Go
- Java
- JavaScript
- .NET
- [[*Node.js SDK][Node.js]]
- PHP
- Python
- Ruby

** Tool type

#+cindex:tools
#+cindex:CLI tool
#+cindex:DevOps tool
#+cindex:IDE toolkits
#+cindex:Mobile SDKs
#+cindex:Mobile tools
#+cindex:monitoring tools
#+cindex:tracing tools
Find the tool you need for the job.

*** Command Line tools

*** SDKs

#+cindex:SDKs
#+cindex:JavaScript SDK
#+cindex:Python SDK
#+cindex:Ruby SDK
#+cindex:Java SDK
#+cindex:Go SDK
#+cindex:Node.js SDK
#+cindex:C++ SDK
SDKs take the complexity out of coding by providing language-specific APIs for
AWS services.

- [[https://aws.amazon.com/sdk-for-node-js/][Node.js]]

- [[https://aws.amazon.com/sdk-for-browser/][JavaScript]]

- [[https://aws.amazon.com/sdk-for-python/][Python]]

- [[https://aws.amazon.com/sdk-for-ruby/][Ruby]]

- [[https://aws.amazon.com/sdk-for-java/][Java]]

- [[https://aws.amazon.com/sdk-for-go/][Go]]

- [[https://aws.amazon.com/sdk-for-cpp/][C++]]

*** DevOps and Automation

*** IDE and IDE Toolkits

*** IoT Device SDKs

*** Mobile SDKs

*** Mobile Tools

*** Monitoring and Tracing

** Connect with the Community

The global AWS ecosystem consists of a range of AWS enthusiasts and advocates
who are passionate about helping others build.  Whether you’re looking for
expert advice or want to add your voice, you can connect with others through
informal chats, live event feeds, launch news, or community stories.

** Additional Resources

- Getting started resources

- GitHub projects

- Jeff Barr blog

- Developer Center

- Developer blog

- AWS answers

- Forums

- StackOverflow

- Upcoming events

- Twitter

* Software Development Kits---SDKs
** Node.js SDK

“AWS SDK for JavaScript in Node.js”

https://aws.amazon.com/sdk-for-node-js/

Get started quickly using AWS with the AWS SDK for JavaScript in Node.js.  The
SDK helps take the complexity out of coding by providing JavaScript objects for
AWS services including Amazon S3, Amazon EC2, DynamoDB, and Amazon SWF.  The
single, downloadable package includes the AWS JavaScript Library and
documentation.

- Download [[https://github.com/aws/aws-sdk-js/releases][AWS SDK for JavaScript]]

- [[https://github.com/aws/aws-sdk-js][Get the source on GitHub]]

- Install using npm
  : npm install aws-sdk

*** AWS SDK for Node.js 3.0 Developer Preview

We are happy to announce the developer preview of the AWS SDK for Node.js
version 3.  This version of the SDK is a major rewrite of the 2.x code base.
It’s written in TypeScript and adds frequently requested features, like
modularized packages.  In 3.x service client packages are created statically
instead of dynamically at the runtime which improves performance and debugging
experience.  The developer preview is your chance to influence the direction of
the new AWS SDK for Node.js.  Tell us what you like and what you don’t like.
Your feedback matters to us.  Find details on various ways to give feedback at
the bottom of this post.

- [[https://aws.amazon.com/blogs/developer/new-aws-sdk-for-javascript-developer-preview/][New AWS SDK for JavaScript – Developer Preview]]

*** Explore Javascript on AWS

“Find all the tools, documentation, and sample code you need to develop secure,
reliable, and scalable Javascript applications on the AWS cloud.”

https://aws.amazon.com/developer/language/javascript/

**** Learn

“Dive deep and discover. Expand and explore.”

Read and watch guidance from experts on AWS. See how to get the most from
AWS. Find solutions to common challenges. Gain the knowledge to get the most
from the AWS cloud.

- [[https://aws.amazon.com/code/JavaScript][Sample Code]]

- [[http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/][Developer Guide]]

- [[https://aws.amazon.com/whitepapers/][Whitepapers]]

- [[https://aws.amazon.com/getting-started/tutorials/create-a-serverless-workflow-step-functions-lambda/][Create a Serverless Workflow]]

**** Develop

“Design and code. Build and test. Run and debug.”

[[https://aws.amazon.com/sdkfornodejs/][Get Started with SDK]]

Get started building browser applications and server applications with the AWS
SDK for JavaScript. Get the libraries, code samples, and documentation you need
to build on AWS.

#+texinfo:@heading Resources

- [[https://aws.amazon.com/sdkfornodejs/][AWS SDK for JavaScript in Node.js]]

- [[https://aws.amazon.com/sdkforbrowser/][AWS SDK for JavaScript in the Browser]]

- [[https://aws.github.io/aws-amplify/][AWS Amplify Library for Web and React Native]]

- [[Deploy Node.js on Elastic Beanstalk ][Deploy Node.js on Elastic Beanstalk]]

- [[http://docs.aws.amazon.com/opsworks/latest/userguide/welcome.html][Deploy Node.js on AWS OpsWorks]]

**** Connect

“Raise questions. Get answers. Connect to AWS.”

Join the community of developers developing secure, reliable, and scalable
applications on the AWS cloud. Make the connections that will shift your
development into the fast lane.

#+texinfo:@heading Resources

- [[http://developer.amazonwebservices.com/connect/forum.jspa?forumID=148][Community Forum]]

- [[http://developer.amazonwebservices.com/connect/forum.jspa?forumID=148][Developer Blog]]

- [[https://github.com/aws/][AWS on GitHub]]

** JavaScript SDK

https://aws.amazon.com/sdk-for-browser/

* Bootstrap
:PROPERTIES:
:header-args: :eval never-export
:appendix: t
:END:
** Makefile

#+texinfo:@heading Tangling

This Makefile must be tangled from within the Org buffer (as opposed to being
tangled from another Org buffer or from a batch script) because the two
functions ~get-org-fiename~ and ~get-file-version~ are elisp functions that use
the current buffer to find the filename and the current version.  The scripts
would have to be done a bit differently to make them work from an external
source.

#+texinfo:@heading Environment Variables Instead of Credentials File

For some reason when running the ~sync~ command via this Makefile, ~aws2~ was
not able to locate my credential information stored in the =~/.aws/credentials=
file created by running ~aws2 configure~.  Therefore, I placed my keys into
environment variables instead, and added the @@texinfo:@option{--region}@@
option explicitly to the command.  This solved the problem.

#+texinfo:@heading Sync Command Problem

The ~sync~ command compares files and only uploads files that have been
changed.  However, the ~makeinfo --html~ command updates every single file, not
just ones that have changed, so anytime the main Org file changes, every single
HTML file will be re-saved, thus eliminating any advantage of the ~sync~
function.

#+name:Makefile
#+begin_src makefile :tangle Makefile :noweb tangle
  ### PROGRAM
  PROG  = <<get-org-filename()>>
  VERS  = <<get-file-version()>>

  ### TEXINFO
  ORG   = $(PROG).org
  TEXI  = $(PROG).texi
  INFO  = $(PROG).info
  PDF   = $(PROG).pdf
  BUILD = $(PROG).t2d

  ### HTML DIR
  DIR   = <<get-org-lc-filename()>>
  INDEX = index.html

  ### AWS
  HOME = s3://pinecone-forest.com
  AWS  = aws2
  S3   = $(AWS) s3
  SRC  = $(DIR)/
  DST  = $(HOME)/$(DIR)/$(VERS)/
  GRANTS = --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
  REGION = --region us-west-2
  SYNC = $(S3) sync $(SRC) $(DST) $(GRANTS) $(REGION)

  default: open-html

  PHONY: default all texi info html pdf open-org open-texi open-html \
	   open-pdf clean clean-dist help sync

  show-version:
	  @echo $(VERS)
	  @echo $(PROG)
	  @echo $(DIR)

  all: texi info html pdf

  open-org: $(ORG)
	  emacsclient $(ORG) &
  $(ORG):
	  @echo 'DISASTER HAS BEFALLEN YOU AS THERE IS NO $(ORG) FILE!!!'
	  exit 1

  texi: $(TEXI)
  $(TEXI): $(ORG)
	  emacs -Q $(ORG) --batch \
	  --eval "(progn(require 'ox-texinfo)(org-texinfo-export-to-texinfo))"

  info: $(INFO)
  $(INFO): $(TEXI)
	  makeinfo $(TEXI)

  html: $(DIR)
  $(DIR): $(TEXI)
	  makeinfo --html $(TEXI)

  pdf: $(PDF)
  $(PDF): $(TEXI)
	  pdftexi2dvi --silent --quiet --build=tidy $(TEXI)

  open-texi: texi
	  emacsclient $(TEXI) &

  open-html: html
	  open $(DIR)/$(INDEX)

  open-pdf: pdf
	  open $(PDF)

  clean:
	  -rm *~
	  -rm *.{texi*,info,html,pdf}

  clean-dist: clean
	  -rm -rf $(DIR) $(BUILD)

  sync:
	  $(SYNC)

  help:
	  @echo '"make default" makes the .texi file \
	  the html files, and opens the index.html file'
	  @echo

	  @echo '"make all" makes the .texi, .info, .pdf, and html distribution'
	  @echo '"make sync" syncs the html files in the AWS S3 bucket HOME; \
	  You must have your AWS credentials installed in ~/.aws/credentials'
	  @echo

	  @echo '"make texi" makes the .texi file'
	  @echo '"make info" makes the .info file'
	  @echo '"make html" makes the html distribution in a subdirectory'
	  @echo '"make pdf" makes the .pdf file'
	  @echo

	  @echo '"make open-org" opens the ORG program using emacsclient for editing'
	  @echo '"make open-texi" opens the .texi file using emacsclient for review'
	  @echo '"make open-html" opens the distribution index.html file \
	  in the default web browser'
	  @echo '"make open-pdf" opens the .pdf file'
	  @echo

	  @echo '"make clean" removes the .texi, .info, and backup files ("*~")'
	  @echo '"make clean-dist" cleans, removes the html distribution, \
	  and removes the build directory'

#+end_src
*** TODO Next
1. The CloudFront configuration needs to be updated recognize the new version
   directory that is created as part of the ~sync~ operation.

2. Update the GitHub HOME website link for each new sync operation.

3. Store on GitHub a version of each other format upon a sync operation (i.e.,
   the INFO and PDF versions)

** Get Org Filename
#+name:get-org-filename
#+begin_src emacs-lisp
(file-name-base)
#+end_src

** Get Org Lowercase Filename
#+name:get-org-lc-filename
#+begin_src emacs-lisp
(downcase (file-name-base))
#+end_src

** Get File Version
#+name:get-file-version
#+begin_src emacs-lisp
  (save-excursion
    (goto-char (point-min))
    (re-search-forward "^#\\+macro:version Version \\(\\(?:[[:digit:]]+\\.?\\)\\{3\\}\\)")
    (concat "v" (match-string-no-properties 1)))
#+end_src

* Copying
:PROPERTIES:
:copying:  t
:END:
{{{title}}} {{{version}}} printed {{{date}}}

Copyright \copy 2019 {{{author}}}

* Main Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:
* Footnotes

[fn:1]We do not recommend hard coding your AWS credentials in your
scripts. Hard coding credentials poses a risk of exposing your access key ID
and secret access key.

[fn:2] Deprecation warning: The use of require('uuid') is deprecated and will
not be supported after version 3.x of this module. Instead, use
require('uuid/[v1|v3|v4|v5]') as shown in the examples below.
: const uuidv1 = require('uuid/v1');

* Export Configuraton                                              :noexport:


#+texinfo_filename:aws-guide.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+texinfo_dir_category:Cloud
#+texinfo_dir_title:AWS Guide
#+texinfo_dir_desc:AWS guide
#+texinfo_printed_title:Amazon Web Services Guide

#+options: toc:t H:4 num:3



* Local Variables                                                  :noexport:
# Local Variables:
# fill-column: 79
# indent-tabs-mode: t
# time-stamp-pattern: "8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# eval: (electric-quote-local-mode t)
# End:
